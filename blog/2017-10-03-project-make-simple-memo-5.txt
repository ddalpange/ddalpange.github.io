0:[[["",{"children":["blog",{"children":[["slug","2017-10-03-project-make-simple-memo-5","d"],{"children":["__PAGE__?{\"slug\":\"2017-10-03-project-make-simple-memo-5\"}",{}]}]}]},"$undefined","$undefined",true],"$L1","$L2"]]
3:I{"id":"2070","name":"","chunks":["131:131-b649a46ff1b8d8bb","185:app/layout-8083bdbad8f07641"],"async":false}
4:I{"id":"7131","name":"","chunks":["131:131-b649a46ff1b8d8bb","179:app/essay/page-803925d136c9d05d"],"async":false}
5:I{"id":"830","name":"","chunks":["272:webpack-b1abe5c771310ce9","776:0b7c6ed9-5895ea2b955a8219","474:474-2bfbc4a0bef14471"],"async":false}
6:I{"id":"2079","name":"","chunks":["272:webpack-b1abe5c771310ce9","776:0b7c6ed9-5895ea2b955a8219","474:474-2bfbc4a0bef14471"],"async":false}
1:[["$","html",null,{"lang":"en","data-theme":"retro","children":["$","body",null,{"className":"flex flex-col items-center h-[100svh]","children":[["$","$L3",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-XR7V7MF96T","strategy":"afterInteractive"}],["$","$L3",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){window.dataLayer.push(arguments);}\n          gtag('js', new Date());\n\n          gtag('config', 'G-XR7V7MF96T');\n        "}],["$","div",null,{"className":"w-full max-w-3xl flex-grow","children":[["$","div",null,{"className":"navbar bg-base-100","children":[["$","div",null,{"className":"flex-1","children":["$","$L4",null,{"className":"p-2 hover:underline md:text-2xl font-bold flex gap-4 items-center","href":"/","children":"Yozzing Blog"}]}],["$","div",null,{"className":"flex-none","children":["$","div",null,{"className":"tabs","children":[["$","$L4",null,{"className":"tab","href":"/engineering","children":"엔지니어링"}],["$","$L4",null,{"className":"tab","href":"/essay","children":"에세이"}],["$","a",null,{"className":"tab","href":"https://github.com/ddalpange","children":["$","div",null,{"className":"avatar","children":["$","div",null,{"className":"w-8 rounded-full","children":["$","img",null,{"src":"/blog/images/profile.jpeg"}]}]}]}]]}]}]]}],["$","div",null,{"className":"p-4 pb-10","children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["slug","2017-10-03-project-make-simple-memo-5","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$L7","$@8"],"segment":"__PAGE__?{\"slug\":\"2017-10-03-project-make-simple-memo-5\"}"}}],"segment":["slug","2017-10-03-project-make-simple-memo-5","d"]}}],"segment":"blog"}}]}]]}]]}]}],"$@9"]
8:[null,null,[]]
9:[null,null,[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/6aab0c2b0a3a27f2.css","precedence":"next.js"}]]]
2:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"간단한 메모장 만들기 5 - CRUD"}],["$","meta",null,{"name":"description","content":"<p>이번 시간에는 메모리스트를 파이어베이스의 데이터베이스를 사용하여 <code>CRUD</code>를 해볼게요. <code>html</code>이나 <code>ts</code>에서 기능 개선을 위해 변경한 코드가 일부 있으니, 감안하여 봐주세요.</p>\n"}],null,[[["$","link",null,{"rel":"author","href":"https://github.io/ddalpange"}],["$","meta",null,{"name":"author","content":"ddalpange"}]]],null,null,["$","meta",null,{"name":"keywords","content":"Javascript,Angular,Ionic,SimpleMemo"}],null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
7:["$","article",null,{"className":"prose","children":[["$","h1",null,{"children":"간단한 메모장 만들기 5 - CRUD"}],["$","caption",null,{"children":"2017/10/03"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"<p>이번 시간에는 메모리스트를 파이어베이스의 데이터베이스를 사용하여 <code>CRUD</code>를 해볼게요. <code>html</code>이나 <code>ts</code>에서 기능 개선을 위해 변경한 코드가 일부 있으니, 감안하여 봐주세요.</p>\n<p><strong>CRUD</strong></p>\n<blockquote>\n<p>CRUD는 대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능인 Create(생성), Read(읽기), Update(갱신), Delete(삭제)를 묶어서 일컫는 말이다. 사용자 인터페이스가 갖추어야 할 기능(정보의 참조/검색/갱신)을 가리키는 용어로서도 사용된다.</p>\n</blockquote>\n<p><strong>Real Time Database</strong></p>\n<blockquote>\n<p>Firebase 실시간 데이터베이스는 클라우드 호스팅 데이터베이스입니다. <strong>데이터는 JSON으로 저장되며 연결된 모든 클라이언트에 실시간으로 동기화됩니다.</strong> iOS, Android 및 자바스크립트 SDK로 교차 플랫폼 앱을 개발하면 모든 클라이언트가 하나의 실시간 데이터베이스 인스턴스를 공유하고 자동 업데이트로 최신 데이터를 수신합니다.</p>\n</blockquote>\n<h3>인터페이스 변경하여 적용하기.</h3>\n<pre><code>export interface Memo {\n  uid: string // 유저넘버\n  author: string // 작성자\n  title: string // 제목\n  contents: string // 본문\n  publishedDate: Date // 작성일\n  recentUpdatedDate: Date // 최근 수정일\n}\n</code></pre>\n<p><strong>key</strong>가 사라지고 <strong>uid</strong>가 추가되었습니다.</p>\n<h3>메모매니저 파이어베이스 연동</h3>\n<pre><code>import { AuthManagerProvider } from \"./../auth-manager/auth-manager\"\nimport { Memo } from \"./../../models/memo/memo.interface\"\nimport { Injectable } from \"@angular/core\"\nimport { Http } from \"@angular/http\"\nimport {\n  AngularFireDatabase,\n  FirebaseListObservable,\n} from \"angularfire2/database\"\n\n/*\n  Generated class for the MemoManagerProvider provider.\n\n  See https://angular.io/docs/ts/latest/guide/dependency-injection.html\n  for more info on providers and Angular DI.\n*/\n@Injectable()\nexport class MemoManagerProvider {\n  memoList: FirebaseListObservable&#x3C;any>\n\n  constructor(\n    public http: Http,\n    public afDB: AngularFireDatabase,\n    public authManager: AuthManagerProvider\n  ) {\n    this.initMemoList()\n  }\n\n  initMemoList() {\n    this.memoList = this.afDB.list(\n      `/memoList/${this.authManager.getUserInfo().uid}`\n    )\n  }\n\n  getMemoList(): FirebaseListObservable&#x3C;Memo> {\n    return this.memoList\n  }\n\n  createMemo(title: string, contents: string) {\n    let memo: Memo = {\n      uid: this.authManager.getUserInfo().uid,\n      title: title,\n      contents: contents,\n      author: this.authManager.getUserInfo().email,\n      publishedDate: new Date(),\n      recentUpdatedDate: new Date(),\n    }\n\n    this.memoList.push(memo)\n  }\n\n  deleteMemo(deleteMemo: any) {\n    this.memoList.remove(deleteMemo)\n  }\n\n  editMemo(memoToChange: Memo, title: string, contents: string) {\n    memoToChange.title = title\n    memoToChange.contents = contents\n    memoToChange.recentUpdatedDate = new Date()\n  }\n}\n</code></pre>\n<p>변경 및 생성을 하면 자동으로 <strong>Observable</strong>이 구독하여 변경사항이 반영됩니다.</p>\n<h3>메모리스트페이지에 반영하기</h3>\n<pre><code>&#x3C;ion-header>\n  &#x3C;ion-navbar color=\"primary\">\n    &#x3C;ion-searchbar [(ngModel)]=\"searchKeyword\">&#x3C;/ion-searchbar>\n    &#x3C;ion-buttons end>\n      &#x3C;button ion-button icon-only (click)=\"onClickMoreOption()\">\n        &#x3C;ion-icon name=\"more\"> &#x3C;/ion-icon>\n      &#x3C;/button>\n    &#x3C;/ion-buttons>\n  &#x3C;/ion-navbar>\n&#x3C;/ion-header>\n&#x3C;ion-content>\n  &#x3C;ng-template ngFor let-memo [ngForOf]=\"memoList | async\" let-i=\"index\">\n    &#x3C;ion-card (click)=\"onClickViewMemoDetail(memo)\" *ngIf=\"filterMemo(memo)\">\n      &#x3C;ion-card-header> {{ memo.title }} &#x3C;/ion-card-header>\n      &#x3C;ion-card-content> {{ memo.contents }} &#x3C;/ion-card-content>\n    &#x3C;/ion-card>\n  &#x3C;/ng-template>\n  &#x3C;ion-fab right bottom>\n    &#x3C;button ion-fab icon-only (click)=\"onClickCreateMemo()\">\n      &#x3C;ion-icon name=\"add\" big>&#x3C;/ion-icon>\n    &#x3C;/button>\n  &#x3C;/ion-fab>\n&#x3C;/ion-content>\n</code></pre>\n<pre><code>import { AuthManagerProvider } from \"./../../providers/auth-manager/auth-manager\"\nimport { FirebaseListObservable } from \"angularfire2/database\"\nimport { Memo } from \"./../../models/memo/memo.interface\"\nimport { Component, OnInit } from \"@angular/core\"\nimport {\n  IonicPage,\n  NavController,\n  NavParams,\n  LoadingController,\n  ActionSheetController,\n} from \"ionic-angular\"\n\nimport { MemoCreatePage } from \"./../memo-create/memo-create\"\nimport { MemoDetailPage } from \"./../memo-detail/memo-detail\"\n\nimport { MemoManagerProvider } from \"./../../providers/memo-manager/memo-manager\"\n@IonicPage()\n@Component({\n  selector: \"page-memo-list\",\n  templateUrl: \"memo-list.html\",\n})\nexport class MemoListPage {\n  searchKeyword: string = \"\"\n  memoList: FirebaseListObservable&#x3C;Memo>\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public loadingCtrl: LoadingController,\n    public actionSheetCtrl: ActionSheetController,\n    public authManager: AuthManagerProvider,\n    public memoManager: MemoManagerProvider\n  ) {}\n\n  ngOnInit() {\n    this.memoList = this.memoManager.getMemoList()\n  }\n\n  filterMemo(memo: Memo): boolean {\n    return (\n      memo.title.includes(this.searchKeyword) ||\n      memo.title.includes(this.searchKeyword)\n    )\n  }\n\n  onClickViewMemoDetail(memo: Memo) {\n    this.navCtrl.push(MemoDetailPage, { memo: memo })\n  }\n\n  onClickCreateMemo() {\n    this.navCtrl.push(MemoCreatePage)\n  }\n\n  onClickMoreOption() {\n    const actionSheet = this.getMoreOptionActionSheet()\n    actionSheet.present()\n  }\n\n  getMoreOptionActionSheet() {\n    return this.actionSheetCtrl.create({\n      buttons: [\n        {\n          text: \"Logout\",\n          role: \"destructive\",\n          handler: () => {\n            this.authManager.logoutUser()\n          },\n        },\n        {\n          text: \"Cancel\",\n          role: \"cancel\",\n        },\n      ],\n    })\n  }\n}\n</code></pre>\n<h3>그 외 html 변경사항들입니다.</h3>\n<pre><code>&#x3C;ion-header>\n  &#x3C;ion-navbar>\n    &#x3C;ion-buttons end>\n      &#x3C;button ion-button icon-only (click)=\"onDeleteMemo(memo)\">\n        &#x3C;ion-icon name=\"trash\">&#x3C;/ion-icon>\n      &#x3C;/button>\n      &#x3C;button ion-button icon-only>\n        &#x3C;ion-icon name=\"more\">&#x3C;/ion-icon>\n      &#x3C;/button>\n    &#x3C;/ion-buttons>\n  &#x3C;/ion-navbar>\n&#x3C;/ion-header>\n&#x3C;ion-content>\n  &#x3C;ion-card (click)=\"onOpenEditMemo(memo)\">\n    &#x3C;ion-card-header>\n      &#x3C;h1>{{ memo.title }}&#x3C;/h1>\n    &#x3C;/ion-card-header>\n    &#x3C;ion-card-content>\n      &#x3C;p>{{ memo.contents }}&#x3C;/p>\n      &#x3C;div class=\"etc\">\n        &#x3C;p>\n          &#x3C;span>저자&#x3C;/span>\n          {{ memo.author }}\n        &#x3C;/p>\n        &#x3C;p>\n          &#x3C;span>발행일&#x3C;/span>\n          {{ memo.publishedDate }}\n        &#x3C;/p>\n        &#x3C;p>\n          &#x3C;span>최근 수정일&#x3C;/span>\n          {{ memo.recentUpdatedDate }}\n        &#x3C;/p>\n      &#x3C;/div>\n    &#x3C;/ion-card-content>\n  &#x3C;/ion-card>\n&#x3C;/ion-content>\n</code></pre>\n<pre><code>&#x3C;ion-header>\n  &#x3C;ion-navbar color=\"secondary\"> &#x3C;/ion-navbar>\n&#x3C;/ion-header>\n&#x3C;ion-content>\n  &#x3C;ion-list>\n    &#x3C;ion-item>\n      &#x3C;ion-label floating>제목을 입력해주세요.&#x3C;/ion-label>\n      &#x3C;ion-input type=\"text\" [(ngModel)]=\"title\">&#x3C;/ion-input>\n    &#x3C;/ion-item>\n    &#x3C;ion-item>\n      &#x3C;ion-label floating>내용을 입력해주세요.&#x3C;/ion-label>\n      &#x3C;ion-textarea rows=\"18\" type=\"text\" [(ngModel)]=\"contents\">&#x3C;/ion-textarea>\n    &#x3C;/ion-item>\n  &#x3C;/ion-list>\n  &#x3C;ion-fab right bottom>\n    &#x3C;button ion-fab icon-only color=\"secondary\" (click)=\"onSaveMemo()\">\n      &#x3C;ion-icon name=\"checkmark\">&#x3C;/ion-icon>\n    &#x3C;/button>\n  &#x3C;/ion-fab>\n&#x3C;/ion-content>\n</code></pre>\n<hr>\n<p>참고 링크</p>\n<ul>\n<li><a href=\"https://github.com/ddalpange/simple-memo\">해당 포스트에 작성된 모든 코드는 여기에 있습니다!</a></li>\n<li><a href=\"https://memo-28314.firebaseapp.com\">해당 프로젝트는 여기서 볼 수 있습니다 !!</a></li>\n</ul>\n"}}]]}]
