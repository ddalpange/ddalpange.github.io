0:[[["",{"children":["blog",{"children":[["slug","2018-11-21-how-to-unsubscibe-in-rxjs","d"],{"children":["__PAGE__?{\"slug\":\"2018-11-21-how-to-unsubscibe-in-rxjs\"}",{}]}]}]},"$undefined","$undefined",true],"$L1","$L2"]]
3:I{"id":"2070","name":"","chunks":["131:131-718a907043a28311","185:app/layout-e989778009efa586"],"async":false}
4:I{"id":"7131","name":"","chunks":["131:131-718a907043a28311","931:app/page-a8aaecf3dc39acc6"],"async":false}
5:I{"id":"830","name":"","chunks":["272:webpack-a84c954fa8715833","776:0b7c6ed9-60e4a7f8e855a262","474:474-c8c5eb3e5e298e46"],"async":false}
6:I{"id":"2079","name":"","chunks":["272:webpack-a84c954fa8715833","776:0b7c6ed9-60e4a7f8e855a262","474:474-c8c5eb3e5e298e46"],"async":false}
1:[["$","html",null,{"lang":"en","data-theme":"retro","children":[["$","head",null,{"children":[["$","link",null,{"rel":"preconnect","href":"https://cdn.jsdelivr.net"}],["$","link",null,{"rel":"stylesheet","type":"text/css","href":"https://cdn.jsdelivr.net/gh/orioncactus/pretendard/dist/web/variable/pretendardvariable.css"}]]}],["$","body",null,{"className":"flex flex-col items-center h-[100svh]","children":[["$","$L3",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-XR7V7MF96T","strategy":"afterInteractive"}],["$","$L3",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){window.dataLayer.push(arguments);}\n          gtag('js', new Date());\n\n          gtag('config', 'G-XR7V7MF96T');\n        "}],["$","div",null,{"className":"w-full max-w-3xl flex-grow","children":[["$","div",null,{"className":"navbar","children":[["$","div",null,{"className":"flex-1","children":["$","$L4",null,{"className":"p-2 hover:underline md:text-2xl font-bold flex gap-4 items-center","href":"/","children":"Yozzing Blog"}]}],["$","div",null,{"className":"flex-none","children":["$","div",null,{"className":"tabs","children":[["$","$L4",null,{"className":"tab","href":"/engineering","children":"Engineering"}],["$","$L4",null,{"className":"tab","href":"/essay","children":"Essay"}],["$","a",null,{"className":"tab","href":"https://github.com/ddalpange","children":["$","div",null,{"className":"avatar","children":["$","div",null,{"className":"w-8 rounded-full","children":["$","img",null,{"alt":"yozzing","src":"/blog/images/profile.jpeg"}]}]}]}]]}]}]]}],["$","div",null,{"className":"p-4 pb-10","children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["slug","2018-11-21-how-to-unsubscibe-in-rxjs","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$L7","$@8"],"segment":"__PAGE__?{\"slug\":\"2018-11-21-how-to-unsubscibe-in-rxjs\"}"}}],"segment":["slug","2018-11-21-how-to-unsubscibe-in-rxjs","d"]}}],"segment":"blog"}}]}]]}]]}]]}],"$@9"]
8:[null,null,[]]
9:[null,null,[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3127ef311b686118.css","precedence":"next.js"}]]]
a:I{"id":"3969","name":"Disqus","chunks":["308:app/blog/[slug]/page-2754d756216a6ffc"],"async":false}
2:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"Rxjs 구독을 취소하는 여러가지 방법"}],["$","meta",null,{"name":"description","content":"<p><strong>Angular</strong>는 기본적으로 <strong>RxJS</strong>를 사용합니다. <strong>RxJS</strong>를 사용할때 스트림을 연 컴포넌트가 없어진다 해도 열린 스트림은 닫히지 않기 때문에 메모리를 계속 먹습니다. 그렇기 때문에 <strong>Unsubscribe</strong>를 호출하여 스트림을 닫아주어야하는데요. 매번 <strong>Unsubscribe</strong>를 하기는 너무나 귀찮음으로 스트림 구독을 해제할 수 있는 다양한 방법을 소개합니다.\n참고로 <strong>HttpClient</strong>, <strong>Router</strong> 등 앵귤러 내부에서 제공하는 기능들은 따로 <strong>Unsubscribe</strong>를 하지 않아도 자동으로 구독을 해제합니다.</p>\n"}],null,[[["$","link",null,{"rel":"author","href":"https://github.io/ddalpange"}],["$","meta",null,{"name":"author","content":"ddalpange"}]]],null,null,["$","meta",null,{"name":"keywords","content":"RxJS,Unsubscribe,Stream,Event"}],null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
7:["$","article",null,{"className":"prose max-w-full flex flex-col items-center","children":[["$","span",null,{"className":"mb-2","children":"4년 이상 전"}],["$","h1",null,{"children":"Rxjs 구독을 취소하는 여러가지 방법"}],["$","div",null,{"children":["$","div",null,{"className":"prose self-center","children":[["$","p","0",{"children":[["$","strong","0",{"children":"Angular"}],"는 기본적으로 ",["$","strong","2",{"children":"RxJS"}],"를 사용합니다. ",["$","strong","4",{"children":"RxJS"}],"를 사용할때 스트림을 연 컴포넌트가 없어진다 해도 열린 스트림은 닫히지 않기 때문에 메모리를 계속 먹습니다. 그렇기 때문에 ",["$","strong","6",{"children":"Unsubscribe"}],"를 호출하여 스트림을 닫아주어야하는데요. 매번 ",["$","strong","8",{"children":"Unsubscribe"}],"를 하기는 너무나 귀찮음으로 스트림 구독을 해제할 수 있는 다양한 방법을 소개합니다.\n참고로 ",["$","strong","10",{"children":"HttpClient"}],", ",["$","strong","12",{"children":"Router"}]," 등 앵귤러 내부에서 제공하는 기능들은 따로 ",["$","strong","14",{"children":"Unsubscribe"}],"를 하지 않아도 자동으로 구독을 해제합니다."]}],"\n",["$","h2","2",{"children":"Async Pipe"}],"\n",["$","pre","4",{"children":["$","code",null,{"children":"export class SomeComponent implements OnInit {\n  list$: Observable<Item[]>\n  ngOnInit(): void {\n    this.list$ = this.api.getList()\n  }\n}\n"}]}],"\n",["$","pre","6",{"children":["$","code",null,{"children":"<ng-container *ngIf=\"list$ | async as list; else loadingTemplate\">\n  <app-table [list]=\"list\" [keys]=\"keys\"></app-table>\n</ng-container>\n"}]}],"\n",["$","p","8",{"children":[["$","strong","0",{"children":"Angular"}]," 에서 제공하는 ",["$","strong","2",{"children":"Async"}]," pipe를 사용하는 방법입니다.\n",["$","strong","4",{"children":"Async"}]," pipe가 알아서 Observable을 구독하고 해지하기 때문에 사용자는 별도로 신경써줄 필요가 없죠. 다만 이 방법은 두가지의 문제가 있습니다."]}],"\n",["$","pre","10",{"children":["$","code",null,{"children":"export class SomeComponent implements OnInit {\n  list$: Observable<Item[]>\n  ngOnInit(): void {\n    this.list$ = this.api.getList().pipe(tap(list => console.log(list)))\n  }\n}\n"}]}],"\n",["$","p","12",{"children":"첫번째로 스크립트내에서 데이터를 쓰기가 귀찮습니다. html에서 event를 통해서 받거나, 아니면 tap operator를 이용해 후킹하여 데이터를 저장해야합니다."}],"\n",["$","pre","14",{"children":["$","code",null,{"children":"<section>\n  <ng-container *ngIf=\"list$ | async as list; else loadingTemplate\">\n    <app-table [list]=\"list\" [keys]=\"keys\"></app-table>\n  </ng-container>\n</section>\n<footer class=\"another\">\n  <!-- Error -->\n  <pre [innerHTML]=\"list | json\"></pre>\n</footer>\n"}]}],"\n",["$","p","16",{"children":"list를 선언한 안쪽이 아닌 바깥쪽에서는 list에 접근할 수가 없습니다.\nasync pipe를 여러번 사용하면 api 요청도 여러번 날라가기 때문에 미리 마크업 구조를 잡고 가야합니다."}],"\n",["$","h2","18",{"children":"TakeUntill"}],"\n",["$","pre","20",{"children":["$","code",null,{"children":"export class SomeComponent implements OnInit, OnDestroy {\n  list: Item[]\n  list$: Observable<Item[]>\n  private unsubscribe$ = new Subject()\n  ngOnInit(): void {\n    this.list$ = this.api\n      .getList()\n      .pipe(takeUntill(this.unsubscribe$))\n      .subscribe(list => {\n        this.list = list\n      })\n  }\n  ngOnDestroy(): void {\n    this.unsubscribe$.next()\n    this.unsubscribe$.complete()\n  }\n}\n"}]}],"\n",["$","p","22",{"children":"인자로 넣어준 Observable (Subject)가 값을 방출하거나 종료할 경우 구독을 해제합니다."}],"\n",["$","h2","24",{"children":"TakeWhile"}],"\n",["$","pre","26",{"children":["$","code",null,{"children":"export class SomeComponent implements OnInit, OnDestroy {\n  list: Item[]\n  list$: Observable<Item[]>\n  private subscribing = true\n  ngOnInit(): void {\n    this.list$ = this.api\n      .getList()\n      .pipe(takeWhile(this.subscribing))\n      .subscribe(list => {\n        this.list = list\n      })\n  }\n  ngOnDestroy(): void {\n    this.subscribing = false\n  }\n}\n"}]}],"\n",["$","p","28",{"children":"인자로 넣어준 Boolean 값이 false일 경우 구독이 일어나지 않습니다."}],"\n",["$","h2","30",{"children":"Take"}],"\n",["$","pre","32",{"children":["$","code",null,{"children":"export class SomeComponent implements OnInit {\n  list: Item[]\n  list$: Observable<Item[]>\n\n  ngOnInit(): void {\n    this.list$ = this.api\n      .getList()\n      .pipe(take(1))\n      .subscribe(list => {\n        this.list = list\n      })\n  }\n}\n"}]}],"\n",["$","p","34",{"children":["인자로 넣어준 숫자만큼 ",["$","strong","1",{"children":"publish"}],"가 일어나면 구독을 종료합니다."]}],"\n",["$","h2","36",{"children":"First"}],"\n",["$","pre","38",{"children":["$","code",null,{"children":"export class SomeComponent implements OnInit {\n  list: Item[]\n  list$: Observable<Item[]>\n\n  ngOnInit(): void {\n    this.list$ = this.api\n      .getList()\n      .pipe(first())\n      .subscribe(list => {\n        this.list = list\n      })\n  }\n}\n"}]}],"\n",["$","p","40",{"children":"첫번째 구독만 받는 operator입니다.\n인자로 expression을 넘겨줄 수 있습니다."}],"\n",["$","p","42",{"children":["이 밖에도 효율적인 ",["$","strong","1",{"children":"Unsubscribe"}]," 방법이 있다면 알려주세요 !!"]}],"\n"]}]}],["$","$La",null,{"post":{"title":"Rxjs 구독을 취소하는 여러가지 방법","thumbnail":"https://cdn-images-1.medium.com/fit/t/1600/480/1*gD37OB2-PtMqZdk3X1YnEQ.png","tags":["RxJS","Unsubscribe","Stream","Event"],"date":"2018-11-21T18:39:55.000Z","categories":["RxJS"],"content":"\n**Angular**는 기본적으로 **RxJS**를 사용합니다. **RxJS**를 사용할때 스트림을 연 컴포넌트가 없어진다 해도 열린 스트림은 닫히지 않기 때문에 메모리를 계속 먹습니다. 그렇기 때문에 **Unsubscribe**를 호출하여 스트림을 닫아주어야하는데요. 매번 **Unsubscribe**를 하기는 너무나 귀찮음으로 스트림 구독을 해제할 수 있는 다양한 방법을 소개합니다.\n참고로 **HttpClient**, **Router** 등 앵귤러 내부에서 제공하는 기능들은 따로 **Unsubscribe**를 하지 않아도 자동으로 구독을 해제합니다.\n\n<!-- more -->\n\n## Async Pipe\n\n```typescript\nexport class SomeComponent implements OnInit {\n  list$: Observable<Item[]>\n  ngOnInit(): void {\n    this.list$ = this.api.getList()\n  }\n}\n```\n\n```html some-component.html\n<ng-container *ngIf=\"list$ | async as list; else loadingTemplate\">\n  <app-table [list]=\"list\" [keys]=\"keys\"></app-table>\n</ng-container>\n```\n\n**Angular** 에서 제공하는 **Async** pipe를 사용하는 방법입니다.\n**Async** pipe가 알아서 Observable을 구독하고 해지하기 때문에 사용자는 별도로 신경써줄 필요가 없죠. 다만 이 방법은 두가지의 문제가 있습니다.\n\n```typescript\nexport class SomeComponent implements OnInit {\n  list$: Observable<Item[]>\n  ngOnInit(): void {\n    this.list$ = this.api.getList().pipe(tap(list => console.log(list)))\n  }\n}\n```\n\n첫번째로 스크립트내에서 데이터를 쓰기가 귀찮습니다. html에서 event를 통해서 받거나, 아니면 tap operator를 이용해 후킹하여 데이터를 저장해야합니다.\n\n```html some-component.html\n<section>\n  <ng-container *ngIf=\"list$ | async as list; else loadingTemplate\">\n    <app-table [list]=\"list\" [keys]=\"keys\"></app-table>\n  </ng-container>\n</section>\n<footer class=\"another\">\n  <!-- Error -->\n  <pre [innerHTML]=\"list | json\"></pre>\n</footer>\n```\n\nlist를 선언한 안쪽이 아닌 바깥쪽에서는 list에 접근할 수가 없습니다.\nasync pipe를 여러번 사용하면 api 요청도 여러번 날라가기 때문에 미리 마크업 구조를 잡고 가야합니다.\n\n## TakeUntill\n\n```typescript\nexport class SomeComponent implements OnInit, OnDestroy {\n  list: Item[]\n  list$: Observable<Item[]>\n  private unsubscribe$ = new Subject()\n  ngOnInit(): void {\n    this.list$ = this.api\n      .getList()\n      .pipe(takeUntill(this.unsubscribe$))\n      .subscribe(list => {\n        this.list = list\n      })\n  }\n  ngOnDestroy(): void {\n    this.unsubscribe$.next()\n    this.unsubscribe$.complete()\n  }\n}\n```\n\n인자로 넣어준 Observable (Subject)가 값을 방출하거나 종료할 경우 구독을 해제합니다.\n\n## TakeWhile\n\n```typescript\nexport class SomeComponent implements OnInit, OnDestroy {\n  list: Item[]\n  list$: Observable<Item[]>\n  private subscribing = true\n  ngOnInit(): void {\n    this.list$ = this.api\n      .getList()\n      .pipe(takeWhile(this.subscribing))\n      .subscribe(list => {\n        this.list = list\n      })\n  }\n  ngOnDestroy(): void {\n    this.subscribing = false\n  }\n}\n```\n\n인자로 넣어준 Boolean 값이 false일 경우 구독이 일어나지 않습니다.\n\n## Take\n\n```typescript\nexport class SomeComponent implements OnInit {\n  list: Item[]\n  list$: Observable<Item[]>\n\n  ngOnInit(): void {\n    this.list$ = this.api\n      .getList()\n      .pipe(take(1))\n      .subscribe(list => {\n        this.list = list\n      })\n  }\n}\n```\n\n인자로 넣어준 숫자만큼 **publish**가 일어나면 구독을 종료합니다.\n\n## First\n\n```typescript\nexport class SomeComponent implements OnInit {\n  list: Item[]\n  list$: Observable<Item[]>\n\n  ngOnInit(): void {\n    this.list$ = this.api\n      .getList()\n      .pipe(first())\n      .subscribe(list => {\n        this.list = list\n      })\n  }\n}\n```\n\n첫번째 구독만 받는 operator입니다.\n인자로 expression을 넘겨줄 수 있습니다.\n\n이 밖에도 효율적인 **Unsubscribe** 방법이 있다면 알려주세요 !!\n\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTYxOTU5MjM0MywxNjEwNTEzMzc5XX0=\n-->\n","contentHtml":"<p><strong>Angular</strong>는 기본적으로 <strong>RxJS</strong>를 사용합니다. <strong>RxJS</strong>를 사용할때 스트림을 연 컴포넌트가 없어진다 해도 열린 스트림은 닫히지 않기 때문에 메모리를 계속 먹습니다. 그렇기 때문에 <strong>Unsubscribe</strong>를 호출하여 스트림을 닫아주어야하는데요. 매번 <strong>Unsubscribe</strong>를 하기는 너무나 귀찮음으로 스트림 구독을 해제할 수 있는 다양한 방법을 소개합니다.\n참고로 <strong>HttpClient</strong>, <strong>Router</strong> 등 앵귤러 내부에서 제공하는 기능들은 따로 <strong>Unsubscribe</strong>를 하지 않아도 자동으로 구독을 해제합니다.</p>\n<h2>Async Pipe</h2>\n<pre><code>export class SomeComponent implements OnInit {\n  list$: Observable&#x3C;Item[]>\n  ngOnInit(): void {\n    this.list$ = this.api.getList()\n  }\n}\n</code></pre>\n<pre><code>&#x3C;ng-container *ngIf=\"list$ | async as list; else loadingTemplate\">\n  &#x3C;app-table [list]=\"list\" [keys]=\"keys\">&#x3C;/app-table>\n&#x3C;/ng-container>\n</code></pre>\n<p><strong>Angular</strong> 에서 제공하는 <strong>Async</strong> pipe를 사용하는 방법입니다.\n<strong>Async</strong> pipe가 알아서 Observable을 구독하고 해지하기 때문에 사용자는 별도로 신경써줄 필요가 없죠. 다만 이 방법은 두가지의 문제가 있습니다.</p>\n<pre><code>export class SomeComponent implements OnInit {\n  list$: Observable&#x3C;Item[]>\n  ngOnInit(): void {\n    this.list$ = this.api.getList().pipe(tap(list => console.log(list)))\n  }\n}\n</code></pre>\n<p>첫번째로 스크립트내에서 데이터를 쓰기가 귀찮습니다. html에서 event를 통해서 받거나, 아니면 tap operator를 이용해 후킹하여 데이터를 저장해야합니다.</p>\n<pre><code>&#x3C;section>\n  &#x3C;ng-container *ngIf=\"list$ | async as list; else loadingTemplate\">\n    &#x3C;app-table [list]=\"list\" [keys]=\"keys\">&#x3C;/app-table>\n  &#x3C;/ng-container>\n&#x3C;/section>\n&#x3C;footer class=\"another\">\n  &#x3C;!-- Error -->\n  &#x3C;pre [innerHTML]=\"list | json\">&#x3C;/pre>\n&#x3C;/footer>\n</code></pre>\n<p>list를 선언한 안쪽이 아닌 바깥쪽에서는 list에 접근할 수가 없습니다.\nasync pipe를 여러번 사용하면 api 요청도 여러번 날라가기 때문에 미리 마크업 구조를 잡고 가야합니다.</p>\n<h2>TakeUntill</h2>\n<pre><code>export class SomeComponent implements OnInit, OnDestroy {\n  list: Item[]\n  list$: Observable&#x3C;Item[]>\n  private unsubscribe$ = new Subject()\n  ngOnInit(): void {\n    this.list$ = this.api\n      .getList()\n      .pipe(takeUntill(this.unsubscribe$))\n      .subscribe(list => {\n        this.list = list\n      })\n  }\n  ngOnDestroy(): void {\n    this.unsubscribe$.next()\n    this.unsubscribe$.complete()\n  }\n}\n</code></pre>\n<p>인자로 넣어준 Observable (Subject)가 값을 방출하거나 종료할 경우 구독을 해제합니다.</p>\n<h2>TakeWhile</h2>\n<pre><code>export class SomeComponent implements OnInit, OnDestroy {\n  list: Item[]\n  list$: Observable&#x3C;Item[]>\n  private subscribing = true\n  ngOnInit(): void {\n    this.list$ = this.api\n      .getList()\n      .pipe(takeWhile(this.subscribing))\n      .subscribe(list => {\n        this.list = list\n      })\n  }\n  ngOnDestroy(): void {\n    this.subscribing = false\n  }\n}\n</code></pre>\n<p>인자로 넣어준 Boolean 값이 false일 경우 구독이 일어나지 않습니다.</p>\n<h2>Take</h2>\n<pre><code>export class SomeComponent implements OnInit {\n  list: Item[]\n  list$: Observable&#x3C;Item[]>\n\n  ngOnInit(): void {\n    this.list$ = this.api\n      .getList()\n      .pipe(take(1))\n      .subscribe(list => {\n        this.list = list\n      })\n  }\n}\n</code></pre>\n<p>인자로 넣어준 숫자만큼 <strong>publish</strong>가 일어나면 구독을 종료합니다.</p>\n<h2>First</h2>\n<pre><code>export class SomeComponent implements OnInit {\n  list: Item[]\n  list$: Observable&#x3C;Item[]>\n\n  ngOnInit(): void {\n    this.list$ = this.api\n      .getList()\n      .pipe(first())\n      .subscribe(list => {\n        this.list = list\n      })\n  }\n}\n</code></pre>\n<p>첫번째 구독만 받는 operator입니다.\n인자로 expression을 넘겨줄 수 있습니다.</p>\n<p>이 밖에도 효율적인 <strong>Unsubscribe</strong> 방법이 있다면 알려주세요 !!</p>\n","summary":"<p><strong>Angular</strong>는 기본적으로 <strong>RxJS</strong>를 사용합니다. <strong>RxJS</strong>를 사용할때 스트림을 연 컴포넌트가 없어진다 해도 열린 스트림은 닫히지 않기 때문에 메모리를 계속 먹습니다. 그렇기 때문에 <strong>Unsubscribe</strong>를 호출하여 스트림을 닫아주어야하는데요. 매번 <strong>Unsubscribe</strong>를 하기는 너무나 귀찮음으로 스트림 구독을 해제할 수 있는 다양한 방법을 소개합니다.\n참고로 <strong>HttpClient</strong>, <strong>Router</strong> 등 앵귤러 내부에서 제공하는 기능들은 따로 <strong>Unsubscribe</strong>를 하지 않아도 자동으로 구독을 해제합니다.</p>\n","slug":"2018-11-21-how-to-unsubscibe-in-rxjs","link":"/blog/2018-11-21-how-to-unsubscibe-in-rxjs"}}]]}]
