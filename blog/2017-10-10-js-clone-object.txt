0:[[["",{"children":["blog",{"children":[["slug","2017-10-10-js-clone-object","d"],{"children":["__PAGE__?{\"slug\":\"2017-10-10-js-clone-object\"}",{}]}]}]},"$undefined","$undefined",true],"$L1","$L2"]]
3:I{"id":"2070","name":"","chunks":["131:131-718a907043a28311","185:app/layout-30f519c873159ffa"],"async":false}
4:I{"id":"7131","name":"","chunks":["131:131-718a907043a28311","931:app/page-a8aaecf3dc39acc6"],"async":false}
5:I{"id":"830","name":"","chunks":["272:webpack-54cd5478b621d6d8","776:0b7c6ed9-60e4a7f8e855a262","474:474-c8c5eb3e5e298e46"],"async":false}
6:I{"id":"2079","name":"","chunks":["272:webpack-54cd5478b621d6d8","776:0b7c6ed9-60e4a7f8e855a262","474:474-c8c5eb3e5e298e46"],"async":false}
1:[["$","html",null,{"lang":"en","data-theme":"retro","children":[["$","head",null,{"children":[["$","link",null,{"rel":"preconnect","href":"https://cdn.jsdelivr.net"}],["$","link",null,{"rel":"stylesheet","type":"text/css","href":"https://cdn.jsdelivr.net/gh/orioncactus/pretendard/dist/web/variable/pretendardvariable.css"}]]}],["$","body",null,{"className":"flex flex-col items-center h-[100svh]","children":[["$","$L3",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-XR7V7MF96T","strategy":"afterInteractive"}],["$","$L3",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){window.dataLayer.push(arguments);}\n          gtag('js', new Date());\n\n          gtag('config', 'G-XR7V7MF96T');\n        "}],["$","div",null,{"className":"w-full max-w-3xl flex-grow","children":[["$","div",null,{"className":"navbar","children":[["$","div",null,{"className":"flex-1","children":["$","$L4",null,{"className":"p-2 hover:underline md:text-2xl font-bold flex gap-4 items-center","href":"/","children":"Yozzing Blog"}]}],["$","div",null,{"className":"flex-none","children":["$","div",null,{"className":"tabs","children":[["$","$L4",null,{"className":"tab","href":"/engineering","children":"Engineering"}],["$","$L4",null,{"className":"tab","href":"/essay","children":"Essay"}],["$","a",null,{"className":"tab","href":"https://github.com/ddalpange","children":["$","div",null,{"className":"avatar","children":["$","div",null,{"className":"w-8 rounded-full","children":["$","img",null,{"alt":"yozzing","src":"/blog/images/profile.jpeg"}]}]}]}]]}]}]]}],["$","div",null,{"className":"p-4 pb-10","children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["slug","2017-10-10-js-clone-object","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$L7","$@8"],"segment":"__PAGE__?{\"slug\":\"2017-10-10-js-clone-object\"}"}}],"segment":["slug","2017-10-10-js-clone-object","d"]}}],"segment":"blog"}}]}]]}]]}]]}],"$@9"]
2:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"자바스크립트 객체 복사하기"}],["$","meta",null,{"name":"description","content":"<h4>시작하기 전에</h4>\n<p><strong>A코드</strong></p>\n<pre><code>let a = 1;\nlet b = a;\nb = 2;\nconsole.log(a, b);\n</code></pre>\n<p><strong>B코드</strong></p>\n<pre><code>let a = { p : 1 };\nlet b = a;\nb.p = 2;\nconsole.log(a.p, b.p);\n</code></pre>\n<p>A코드와 B코드 두가지의 코드가 있다.\n두 코드 모두 <code>b에 a를 대입하였다.</code>라고 생각하는가?\n혹은\n두 코드 모두 <code>b에 a를 복사하였다</code>라고 생각하는가?</p>\n"}],null,[[["$","link",null,{"rel":"author","href":"https://github.io/ddalpange"}],["$","meta",null,{"name":"author","content":"ddalpange"}]]],null,null,["$","meta",null,{"name":"keywords","content":"Javascript,DeepCopy,ShallowCopy"}],null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
a:I{"id":"3969","name":"Disqus","chunks":["308:app/blog/[slug]/page-2754d756216a6ffc"],"async":false}
7:["$","article",null,{"className":"prose max-w-full flex flex-col items-center","children":[["$","span",null,{"className":"mb-2","children":"5년 이상 전"}],["$","h1",null,{"children":"자바스크립트 객체 복사하기"}],["$","div",null,{"children":["$","div",null,{"className":"prose self-center","children":[["$","h4","0",{"children":"시작하기 전에"}],"\n",["$","p","2",{"children":["$","strong",null,{"children":"A코드"}]}],"\n",["$","pre","4",{"children":["$","code",null,{"children":"let a = 1;\nlet b = a;\nb = 2;\nconsole.log(a, b);\n"}]}],"\n",["$","p","6",{"children":["$","strong",null,{"children":"B코드"}]}],"\n",["$","pre","8",{"children":["$","code",null,{"children":"let a = { p : 1 };\nlet b = a;\nb.p = 2;\nconsole.log(a.p, b.p);\n"}]}],"\n",["$","p","10",{"children":["A코드와 B코드 두가지의 코드가 있다.\n두 코드 모두 ",["$","code","1",{"children":"b에 a를 대입하였다."}],"라고 생각하는가?\n혹은\n두 코드 모두 ",["$","code","3",{"children":"b에 a를 복사하였다"}],"라고 생각하는가?"]}],"\n",["$","p","12",{"children":["결론부터 말하자면 ",["$","strong","1",{"children":"틀렸다"}],".\n자바스크립트는 불변형의 데이터를 선언할 때 포인터와 값 모두 생성하지만,\n오브젝트(배열)을 생성할 때에는 메모리 절약을 위해 포인터만 새로 할당할 뿐이다."]}],"\n",["$","p","14",{"children":["즉 A코드에서는 ",["$","code","1",{"children":"b에 a를 복사하였다."}],"가 맞는것이고\nB코드에서는 ",["$","code","3",{"children":"b에 a를 대입하였다."}],"가 맞는 해석이 된다.\n이제 B코드에서 ",["$","code","5",{"children":"b에 a를 복사하였다"}],"가 성립하도록 해보자."]}],"\n",["$","h4","16",{"children":["1. ",["$","a","1",{"href":"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/assign","children":"Object.assign()"}],"을 이용"]}],"\n",["$","pre","18",{"children":["$","code",null,{"children":"function cloneObject(obj) {\n  return Object.assign({}, obj);\n}\n"}]}],"\n",["$","p","20",{"children":[["$","strong","0",{"children":"Object.assign"}],"은 첫번째 인자로 들어오는 객체에 두번째 인자로 들어오는 객체의 프로퍼티들을 차례대로 덮어쓰기하여 반환하는 메소드이다.\n여기서 주의할 점은 ",["$","strong","2",{"children":"Object.assign"}],"은 프로퍼티들에 대한 참조를 덮어쓰기하기 때문에, 오브젝트 안에 오브젝트 또는 배열이 있을 경우 복사가 아닌 참조를 하게된다.\n즉 객체를 ",["$","code","4",{"children":"얕은 복사(Shallow Copy)"}],"한다."]}],"\n",["$","h4","22",{"children":"2. JSON 객체의 메소드를 이용"}],"\n",["$","pre","24",{"children":["$","code",null,{"children":"function cloneObject(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n"}]}],"\n",["$","p","26",{"children":[["$","strong","0",{"children":"JSON.stringify"}],"는 자바스크립트 오브젝트를 스트링 포멧으로 변환하는 메소드이다.\n",["$","strong","2",{"children":"JSON.parse"}],"는 스트링 포멧을 자바스크립트 오브젝트로 변환하는 메소드이다."]}],"\n",["$","p","28",{"children":["스트링으로 변환하였다가 다시 오브젝트로 변환하기 때문에 이전 객체에 대한 참조가 없어지지만 JSON 메소드 자체가 성능면에서 다른 방법에 비해 굉장히 느리기 때문에 주의해야한다.\n이 방법은 객체를 ",["$","code","1",{"children":"깊은 복사(Deep Copy)"}],"한다."]}],"\n",["$","h4","30",{"children":"3. 자바스크립트 재귀 사용"}],"\n",["$","pre","32",{"children":["$","code",null,{"children":"function cloneObject(obj) {\n    var clone = {};\n    for(var i in obj) {\n        if(typeof(obj[i])==\"object\" && obj[i] != null)\n            clone[i] = cloneObject(obj[i]);\n        else\n            clone[i] = obj[i];\n    }\n    return clone;\n}\n"}]}],"\n",["$","p","34",{"children":["오브젝트의 프로퍼티들을 순회하여 빈 오브젝트에 더한다. 그 과정에서 원본 오브젝트의 프로퍼티가 오브젝트일 경우 재귀적으로 함수를 실행한다.\n이 방법은 객체를 ",["$","code","1",{"children":"깊은 복사(Deep Copy)"}],"한다."]}],"\n",["$","h4","36",{"children":["4. ",["$","a","1",{"href":"https://facebook.github.io/immutable-js/","children":"Immutable.js"}]," 사용"]}],"\n",["$","pre","38",{"children":["$","code",null,{"children":"import { Map } from 'immutable';\n\nlet map = Map({a : 1});\nlet newMap = map;\nnewMap.set('a', 2);\nconsole.log(map.get('a'));\nconsole.log(newMap.get('a'));\n"}]}],"\n",["$","p","40",{"children":"페이스북에서 만든 오픈소스 라이브러리이다.\nImmutable을 쓰게된다면 Array, Map 모두 이뮤터블하게 쓸 수 있게된다.\n객체의 내부 값을 변경해도 원본 객체의 값은 변화하지 않고 새로운 객체를 배출한다는 뜻이다.\n사용법이 비교적 간편하지만 처음 보는 사람일 경우 적응하는데 어려움이 있을 수 있다."}],"\n",["$","blockquote","42",{"children":["\n",["$","p","1",{"children":["여담이지만 이 라이브러리를 사용할 때 로그를 찍을려면 ",["$","strong","1",{"children":"toJS"}],"메소드를 사용하여 순수 자바스크립트 객체로 변환해야하는데 매번 까먹어서 불편했다 :("]}],"\n"]}],"\n",["$","h4","44",{"children":"정리하며"}],"\n",["$","p","46",{"children":"사실 유지보수나 신규개발을 하면서 객체의 딥카피가 필요한 경우는 많이 없었다.\n대부분 스왈로카피로 해결할 수 있으며 딥카피는 피하는것이 더 빠르고 직관적이기 때문이다."}],"\n",["$","p","48",{"children":["주의할 점은 단순히 ",["$","code","1",{"children":"="}],"를 통해 변수를 대입하는것과  ",["$","code","3",{"children":"얕은 복사"}],"는 엄연히 다르다는 것이다.\n",["$","code","5",{"children":"="}],"와 ",["$","code","7",{"children":"얕은 복사"}],"와 ",["$","code","9",{"children":"깊은 복사"}],"의 차이만 알아가도 성공한것이 아닐까 ?\n이것을 모르는 개발자들이 적지 않아서 조금 놀랐다."]}],"\n"]}]}],["$","$La",null,{"post":{"title":"자바스크립트 객체 복사하기","date":"2017-10-10T16:26:05.000Z","thumbnail":null,"categories":["Javascript"],"tags":["Javascript","DeepCopy","ShallowCopy"],"toc":true,"content":"\n#### 시작하기 전에\n\n**A코드**\n```js\nlet a = 1;\nlet b = a;\nb = 2;\nconsole.log(a, b);\n```\n**B코드**\n```js\nlet a = { p : 1 };\nlet b = a;\nb.p = 2;\nconsole.log(a.p, b.p);\n```\nA코드와 B코드 두가지의 코드가 있다.\n두 코드 모두 `b에 a를 대입하였다.`라고 생각하는가?\n혹은\n두 코드 모두 `b에 a를 복사하였다`라고 생각하는가?\n<!-- more -->\n결론부터 말하자면 **틀렸다**.\n자바스크립트는 불변형의 데이터를 선언할 때 포인터와 값 모두 생성하지만,\n오브젝트(배열)을 생성할 때에는 메모리 절약을 위해 포인터만 새로 할당할 뿐이다.\n\n즉 A코드에서는 `b에 a를 복사하였다.`가 맞는것이고\nB코드에서는 `b에 a를 대입하였다.`가 맞는 해석이 된다.\n이제 B코드에서 `b에 a를 복사하였다`가 성립하도록 해보자.\n\n#### 1. [Object.assign()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)을 이용\n\n```js\nfunction cloneObject(obj) {\n  return Object.assign({}, obj);\n}\n```\n\n**Object.assign**은 첫번째 인자로 들어오는 객체에 두번째 인자로 들어오는 객체의 프로퍼티들을 차례대로 덮어쓰기하여 반환하는 메소드이다.\n여기서 주의할 점은 **Object.assign**은 프로퍼티들에 대한 참조를 덮어쓰기하기 때문에, 오브젝트 안에 오브젝트 또는 배열이 있을 경우 복사가 아닌 참조를 하게된다.\n즉 객체를 `얕은 복사(Shallow Copy)`한다.\n\n#### 2. JSON 객체의 메소드를 이용\n```js\nfunction cloneObject(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n```\n**JSON.stringify**는 자바스크립트 오브젝트를 스트링 포멧으로 변환하는 메소드이다.\n**JSON.parse**는 스트링 포멧을 자바스크립트 오브젝트로 변환하는 메소드이다.\n\n스트링으로 변환하였다가 다시 오브젝트로 변환하기 때문에 이전 객체에 대한 참조가 없어지지만 JSON 메소드 자체가 성능면에서 다른 방법에 비해 굉장히 느리기 때문에 주의해야한다.\n이 방법은 객체를 `깊은 복사(Deep Copy)`한다.\n\n#### 3. 자바스크립트 재귀 사용\n```js\nfunction cloneObject(obj) {\n    var clone = {};\n    for(var i in obj) {\n        if(typeof(obj[i])==\"object\" && obj[i] != null)\n            clone[i] = cloneObject(obj[i]);\n        else\n            clone[i] = obj[i];\n    }\n    return clone;\n}\n```\n\n오브젝트의 프로퍼티들을 순회하여 빈 오브젝트에 더한다. 그 과정에서 원본 오브젝트의 프로퍼티가 오브젝트일 경우 재귀적으로 함수를 실행한다.\n이 방법은 객체를 `깊은 복사(Deep Copy)`한다.\n\n#### 4. [Immutable.js](https://facebook.github.io/immutable-js/) 사용\n```js\nimport { Map } from 'immutable';\n\nlet map = Map({a : 1});\nlet newMap = map;\nnewMap.set('a', 2);\nconsole.log(map.get('a'));\nconsole.log(newMap.get('a'));\n```\n페이스북에서 만든 오픈소스 라이브러리이다.\nImmutable을 쓰게된다면 Array, Map 모두 이뮤터블하게 쓸 수 있게된다.\n객체의 내부 값을 변경해도 원본 객체의 값은 변화하지 않고 새로운 객체를 배출한다는 뜻이다.\n사용법이 비교적 간편하지만 처음 보는 사람일 경우 적응하는데 어려움이 있을 수 있다.\n\n> 여담이지만 이 라이브러리를 사용할 때 로그를 찍을려면 **toJS**메소드를 사용하여 순수 자바스크립트 객체로 변환해야하는데 매번 까먹어서 불편했다 :(\n\n#### 정리하며\n\n사실 유지보수나 신규개발을 하면서 객체의 딥카피가 필요한 경우는 많이 없었다.\n대부분 스왈로카피로 해결할 수 있으며 딥카피는 피하는것이 더 빠르고 직관적이기 때문이다.\n\n주의할 점은 단순히 `=`를 통해 변수를 대입하는것과  `얕은 복사`는 엄연히 다르다는 것이다.\n`=`와 `얕은 복사`와 `깊은 복사`의 차이만 알아가도 성공한것이 아닐까 ?\n이것을 모르는 개발자들이 적지 않아서 조금 놀랐다.","contentHtml":"<h4>시작하기 전에</h4>\n<p><strong>A코드</strong></p>\n<pre><code>let a = 1;\nlet b = a;\nb = 2;\nconsole.log(a, b);\n</code></pre>\n<p><strong>B코드</strong></p>\n<pre><code>let a = { p : 1 };\nlet b = a;\nb.p = 2;\nconsole.log(a.p, b.p);\n</code></pre>\n<p>A코드와 B코드 두가지의 코드가 있다.\n두 코드 모두 <code>b에 a를 대입하였다.</code>라고 생각하는가?\n혹은\n두 코드 모두 <code>b에 a를 복사하였다</code>라고 생각하는가?</p>\n<p>결론부터 말하자면 <strong>틀렸다</strong>.\n자바스크립트는 불변형의 데이터를 선언할 때 포인터와 값 모두 생성하지만,\n오브젝트(배열)을 생성할 때에는 메모리 절약을 위해 포인터만 새로 할당할 뿐이다.</p>\n<p>즉 A코드에서는 <code>b에 a를 복사하였다.</code>가 맞는것이고\nB코드에서는 <code>b에 a를 대입하였다.</code>가 맞는 해석이 된다.\n이제 B코드에서 <code>b에 a를 복사하였다</code>가 성립하도록 해보자.</p>\n<h4>1. <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\">Object.assign()</a>을 이용</h4>\n<pre><code>function cloneObject(obj) {\n  return Object.assign({}, obj);\n}\n</code></pre>\n<p><strong>Object.assign</strong>은 첫번째 인자로 들어오는 객체에 두번째 인자로 들어오는 객체의 프로퍼티들을 차례대로 덮어쓰기하여 반환하는 메소드이다.\n여기서 주의할 점은 <strong>Object.assign</strong>은 프로퍼티들에 대한 참조를 덮어쓰기하기 때문에, 오브젝트 안에 오브젝트 또는 배열이 있을 경우 복사가 아닌 참조를 하게된다.\n즉 객체를 <code>얕은 복사(Shallow Copy)</code>한다.</p>\n<h4>2. JSON 객체의 메소드를 이용</h4>\n<pre><code>function cloneObject(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n</code></pre>\n<p><strong>JSON.stringify</strong>는 자바스크립트 오브젝트를 스트링 포멧으로 변환하는 메소드이다.\n<strong>JSON.parse</strong>는 스트링 포멧을 자바스크립트 오브젝트로 변환하는 메소드이다.</p>\n<p>스트링으로 변환하였다가 다시 오브젝트로 변환하기 때문에 이전 객체에 대한 참조가 없어지지만 JSON 메소드 자체가 성능면에서 다른 방법에 비해 굉장히 느리기 때문에 주의해야한다.\n이 방법은 객체를 <code>깊은 복사(Deep Copy)</code>한다.</p>\n<h4>3. 자바스크립트 재귀 사용</h4>\n<pre><code>function cloneObject(obj) {\n    var clone = {};\n    for(var i in obj) {\n        if(typeof(obj[i])==\"object\" &#x26;&#x26; obj[i] != null)\n            clone[i] = cloneObject(obj[i]);\n        else\n            clone[i] = obj[i];\n    }\n    return clone;\n}\n</code></pre>\n<p>오브젝트의 프로퍼티들을 순회하여 빈 오브젝트에 더한다. 그 과정에서 원본 오브젝트의 프로퍼티가 오브젝트일 경우 재귀적으로 함수를 실행한다.\n이 방법은 객체를 <code>깊은 복사(Deep Copy)</code>한다.</p>\n<h4>4. <a href=\"https://facebook.github.io/immutable-js/\">Immutable.js</a> 사용</h4>\n<pre><code>import { Map } from 'immutable';\n\nlet map = Map({a : 1});\nlet newMap = map;\nnewMap.set('a', 2);\nconsole.log(map.get('a'));\nconsole.log(newMap.get('a'));\n</code></pre>\n<p>페이스북에서 만든 오픈소스 라이브러리이다.\nImmutable을 쓰게된다면 Array, Map 모두 이뮤터블하게 쓸 수 있게된다.\n객체의 내부 값을 변경해도 원본 객체의 값은 변화하지 않고 새로운 객체를 배출한다는 뜻이다.\n사용법이 비교적 간편하지만 처음 보는 사람일 경우 적응하는데 어려움이 있을 수 있다.</p>\n<blockquote>\n<p>여담이지만 이 라이브러리를 사용할 때 로그를 찍을려면 <strong>toJS</strong>메소드를 사용하여 순수 자바스크립트 객체로 변환해야하는데 매번 까먹어서 불편했다 :(</p>\n</blockquote>\n<h4>정리하며</h4>\n<p>사실 유지보수나 신규개발을 하면서 객체의 딥카피가 필요한 경우는 많이 없었다.\n대부분 스왈로카피로 해결할 수 있으며 딥카피는 피하는것이 더 빠르고 직관적이기 때문이다.</p>\n<p>주의할 점은 단순히 <code>=</code>를 통해 변수를 대입하는것과  <code>얕은 복사</code>는 엄연히 다르다는 것이다.\n<code>=</code>와 <code>얕은 복사</code>와 <code>깊은 복사</code>의 차이만 알아가도 성공한것이 아닐까 ?\n이것을 모르는 개발자들이 적지 않아서 조금 놀랐다.</p>\n","summary":"<h4>시작하기 전에</h4>\n<p><strong>A코드</strong></p>\n<pre><code>let a = 1;\nlet b = a;\nb = 2;\nconsole.log(a, b);\n</code></pre>\n<p><strong>B코드</strong></p>\n<pre><code>let a = { p : 1 };\nlet b = a;\nb.p = 2;\nconsole.log(a.p, b.p);\n</code></pre>\n<p>A코드와 B코드 두가지의 코드가 있다.\n두 코드 모두 <code>b에 a를 대입하였다.</code>라고 생각하는가?\n혹은\n두 코드 모두 <code>b에 a를 복사하였다</code>라고 생각하는가?</p>\n","slug":"2017-10-10-js-clone-object","link":"/blog/2017-10-10-js-clone-object"}}]]}]
8:[null,null,[]]
9:[null,null,[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4640374ce090311f.css","precedence":"next.js"}]]]
