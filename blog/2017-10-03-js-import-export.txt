1:HL["/_next/static/css/3127ef311b686118.css",{"as":"style"}]
0:[[["",{"children":["blog",{"children":[["slug","2017-10-03-js-import-export","d"],{"children":["__PAGE__?{\"slug\":\"2017-10-03-js-import-export\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3127ef311b686118.css","precedence":"next"}]],["$L3",null]]]]
4:I{"id":"8717","chunks":["146:static/chunks/146-0b9edffcecace5b8.js","185:static/chunks/app/layout-588365b8ca87dbfe.js"],"name":"","async":false}
5:I{"id":"3146","chunks":["146:static/chunks/146-0b9edffcecace5b8.js","179:static/chunks/app/essay/page-692c51b8a8fdf410.js"],"name":"","async":false}
6:I{"id":"9082","chunks":["272:static/chunks/webpack-a84c954fa8715833.js","763:static/chunks/3545d7d3-1319cab7d7f01495.js","895:static/chunks/895-890d488364659f80.js"],"name":"","async":false}
7:I{"id":"4127","chunks":["272:static/chunks/webpack-a84c954fa8715833.js","763:static/chunks/3545d7d3-1319cab7d7f01495.js","895:static/chunks/895-890d488364659f80.js"],"name":"","async":false}
2:[["$","html",null,{"lang":"en","data-theme":"retro","children":[["$","head",null,{"children":[["$","link",null,{"rel":"preconnect","href":"https://cdn.jsdelivr.net"}],["$","link",null,{"rel":"stylesheet","type":"text/css","href":"https://cdn.jsdelivr.net/gh/orioncactus/pretendard/dist/web/variable/pretendardvariable.css"}]]}],["$","body",null,{"className":"flex flex-col items-center h-[100svh]","children":[["$","$L4",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-XR7V7MF96T","strategy":"afterInteractive"}],["$","$L4",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){window.dataLayer.push(arguments);}\n          gtag('js', new Date());\n\n          gtag('config', 'G-XR7V7MF96T');\n        "}],["$","div",null,{"className":"w-full max-w-3xl flex-grow","children":[["$","div",null,{"className":"navbar","children":[["$","div",null,{"className":"flex-1","children":["$","$L5",null,{"className":"p-2 hover:underline md:text-2xl font-bold flex gap-4 items-center","href":"/","children":"Yozzing Blog"}]}],["$","div",null,{"className":"flex-none","children":["$","div",null,{"className":"tabs","children":[["$","$L5",null,{"className":"tab","href":"/engineering","children":"Engineering"}],["$","$L5",null,{"className":"tab","href":"/essay","children":"Essay"}],["$","a",null,{"className":"tab","href":"https://github.com/ddalpange","children":["$","div",null,{"className":"avatar","children":["$","div",null,{"className":"w-8 rounded-full","children":["$","img",null,{"alt":"yozzing","src":"/blog/images/profile.jpeg"}]}]}]}]]}]}]]}],["$","div",null,{"className":"p-4 pb-10","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["slug","2017-10-03-js-import-export","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$L8",null],"segment":"__PAGE__?{\"slug\":\"2017-10-03-js-import-export\"}"},"styles":[]}],"segment":["slug","2017-10-03-js-import-export","d"]},"styles":[]}],"segment":"blog"},"styles":[]}]}]]}]]}]]}],null]
3:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"임포트와 익스포트"}],["$","meta",null,{"name":"description","content":"<p>자바스크립트 프로젝에서 상수를 관리하기 위한 방법을 설명하는 글.</p>\n"}],null,[[["$","link",null,{"rel":"author","href":"https://github.io/ddalpange"}],["$","meta",null,{"name":"author","content":"ddalpange"}]]],null,null,["$","meta",null,{"name":"keywords","content":"Javascript"}],null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,null]
9:I{"id":"9432","chunks":["308:static/chunks/app/blog/[slug]/page-c76664ffa773d92a.js"],"name":"Disqus","async":false}
8:["$","article",null,{"className":"prose max-w-full flex flex-col items-center","children":[["$","span",null,{"className":"mb-2","children":"5년 이상 전"}],["$","h1",null,{"children":"임포트와 익스포트"}],["$","div",null,{"children":["$","div",null,{"className":"prose self-center","children":[["$","p","0",{"children":"자바스크립트 프로젝에서 상수를 관리하기 위한 방법을 설명하는 글."}],"\n",["$","h3","2",{"children":"Import, Export"}],"\n",["$","p","4",{"children":"기존 프로젝트 유지보수를 진행하다 보면 \"AS20342\"과 같은 특정한 코드값들이 있다. 그러한 코드값들은 전부 공통으로 모아 상수로 빼는게 상책인데, import, export를 어떻게 해야할지 감이 오질 않았다. 아래 내용은 공통함수를 뺄때까지의 과정이다."}],"\n",["$","h4","6",{"children":"1. Obejct형태로 Export한다."}],"\n",["$","pre","8",{"children":["$","code",null,{"children":"const obj = {\n  name: \"ddalpange\",\n  password: 123456\n}\n\nexport default obj;\n"}]}],"\n",["$","p","10",{"children":"-> 나쁘지 않은 방법이다. 하지만 오브젝트를 const로 선언한다면 오브젝트의 프로퍼티 값은 const가 아니기 때문에 obj.name  = \"puppy\"와 같이 값 자체를 바꿀 수 있다. 엄밀히 따지자면 상수가 아닌 셈이다. (Object.freeze()라는 것을 사용하면 될 수도 ??)"}],"\n",["$","h4","12",{"children":"2. Class 형태로 Export한다."}],"\n",["$","pre","14",{"children":["$","code",null,{"children":"class test {\n  init() {\n    this.obj = { \"name\" : \"ddalpange\"}\n  };\n  getName(keyName) {\n    if(this.obj.hasOwnProperty(keyName) {\n      this.obj[keyName];\n    } else {\n      return null;\n    }\n  }\n}\n"}]}],"\n",["$","p","16",{"children":"-> 이상하다. 그저 변수 하나를 뺴기 위하여 클래스를 선언한다는 것은 값어치가 없는 일이다."}],"\n",["$","h4","18",{"children":"3. const 선언을 할 떄 마다 export를 붙여준다."}],"\n",["$","pre","20",{"children":["$","code",null,{"children":"export const a = \"1\";\nexport const b = \"2\";\nexport const c = \"3\";\n"}]}],"\n",["$","p","22",{"children":"-> 이 방법이 제일 좋은 방법인 것 같다. 하지만 위의 방법으로 Export하여 사용할려면 Import의 방식이 다르다."}],"\n",["$","pre","24",{"children":["$","code",null,{"children":"Import * as test from {SRC}\n"}]}],"\n",["$","p","26",{"children":"위와 같이 Import하면 test.a, test.b 와 같이 접근할 수 있다."}],"\n",["$","p","28",{"children":"test라는 오브젝트의 프로퍼티에 접근한다고 생각하면 쉬울 듯 하다 :)"}],"\n",["$","p","30",{"children":"별것 아닌것 같아 보이지만 찾느라 고생을 많이 한 것 같다."}],"\n",["$","p","32",{"children":"프로젝트 폴더구조가 알아보기 쉽지않고, import, export 경로 찾기도 매우 어려운데"}],"\n",["$","p","34",{"children":"나중에 폴더마다 index.js를 만들어 import하기 쉽게 만들어야겠다."}],"\n"]}]}],["$","$L9",null,{"post":{"title":"임포트와 익스포트","date":"2017-10-03T22:46:44.000Z","thumbnail":null,"categories":["Javascript"],"tags":["Javascript"],"toc":true,"content":"\n자바스크립트 프로젝에서 상수를 관리하기 위한 방법을 설명하는 글.\n\n<!-- more -->\n\n###  Import, Export\n\n기존 프로젝트 유지보수를 진행하다 보면 \"AS20342\"과 같은 특정한 코드값들이 있다. 그러한 코드값들은 전부 공통으로 모아 상수로 빼는게 상책인데, import, export를 어떻게 해야할지 감이 오질 않았다. 아래 내용은 공통함수를 뺄때까지의 과정이다.\n\n\n#### 1. Obejct형태로 Export한다.\n\n```javascript\nconst obj = {\n  name: \"ddalpange\",\n  password: 123456\n}\n\nexport default obj;\n```\n\n\n-> 나쁘지 않은 방법이다. 하지만 오브젝트를 const로 선언한다면 오브젝트의 프로퍼티 값은 const가 아니기 때문에 obj.name  = \"puppy\"와 같이 값 자체를 바꿀 수 있다. 엄밀히 따지자면 상수가 아닌 셈이다. (Object.freeze()라는 것을 사용하면 될 수도 ??)\n\n#### 2. Class 형태로 Export한다.\n\n```javascript\nclass test {\n  init() {\n    this.obj = { \"name\" : \"ddalpange\"}\n  };\n  getName(keyName) {\n    if(this.obj.hasOwnProperty(keyName) {\n      this.obj[keyName];\n    } else {\n      return null;\n    }\n  }\n}\n```\n\n-> 이상하다. 그저 변수 하나를 뺴기 위하여 클래스를 선언한다는 것은 값어치가 없는 일이다.\n\n#### 3. const 선언을 할 떄 마다 export를 붙여준다.\n\n```javascript\nexport const a = \"1\";\nexport const b = \"2\";\nexport const c = \"3\";\n```\n-> 이 방법이 제일 좋은 방법인 것 같다. 하지만 위의 방법으로 Export하여 사용할려면 Import의 방식이 다르다.\n\n```javascript\nImport * as test from {SRC}\n```\n\n위와 같이 Import하면 test.a, test.b 와 같이 접근할 수 있다.\n\ntest라는 오브젝트의 프로퍼티에 접근한다고 생각하면 쉬울 듯 하다 :)\n\n별것 아닌것 같아 보이지만 찾느라 고생을 많이 한 것 같다.\n\n프로젝트 폴더구조가 알아보기 쉽지않고, import, export 경로 찾기도 매우 어려운데\n\n나중에 폴더마다 index.js를 만들어 import하기 쉽게 만들어야겠다. \n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTI0MTU5NTUyNF19\n-->","contentHtml":"<p>자바스크립트 프로젝에서 상수를 관리하기 위한 방법을 설명하는 글.</p>\n<h3>Import, Export</h3>\n<p>기존 프로젝트 유지보수를 진행하다 보면 \"AS20342\"과 같은 특정한 코드값들이 있다. 그러한 코드값들은 전부 공통으로 모아 상수로 빼는게 상책인데, import, export를 어떻게 해야할지 감이 오질 않았다. 아래 내용은 공통함수를 뺄때까지의 과정이다.</p>\n<h4>1. Obejct형태로 Export한다.</h4>\n<pre><code>const obj = {\n  name: \"ddalpange\",\n  password: 123456\n}\n\nexport default obj;\n</code></pre>\n<p>-> 나쁘지 않은 방법이다. 하지만 오브젝트를 const로 선언한다면 오브젝트의 프로퍼티 값은 const가 아니기 때문에 obj.name  = \"puppy\"와 같이 값 자체를 바꿀 수 있다. 엄밀히 따지자면 상수가 아닌 셈이다. (Object.freeze()라는 것을 사용하면 될 수도 ??)</p>\n<h4>2. Class 형태로 Export한다.</h4>\n<pre><code>class test {\n  init() {\n    this.obj = { \"name\" : \"ddalpange\"}\n  };\n  getName(keyName) {\n    if(this.obj.hasOwnProperty(keyName) {\n      this.obj[keyName];\n    } else {\n      return null;\n    }\n  }\n}\n</code></pre>\n<p>-> 이상하다. 그저 변수 하나를 뺴기 위하여 클래스를 선언한다는 것은 값어치가 없는 일이다.</p>\n<h4>3. const 선언을 할 떄 마다 export를 붙여준다.</h4>\n<pre><code>export const a = \"1\";\nexport const b = \"2\";\nexport const c = \"3\";\n</code></pre>\n<p>-> 이 방법이 제일 좋은 방법인 것 같다. 하지만 위의 방법으로 Export하여 사용할려면 Import의 방식이 다르다.</p>\n<pre><code>Import * as test from {SRC}\n</code></pre>\n<p>위와 같이 Import하면 test.a, test.b 와 같이 접근할 수 있다.</p>\n<p>test라는 오브젝트의 프로퍼티에 접근한다고 생각하면 쉬울 듯 하다 :)</p>\n<p>별것 아닌것 같아 보이지만 찾느라 고생을 많이 한 것 같다.</p>\n<p>프로젝트 폴더구조가 알아보기 쉽지않고, import, export 경로 찾기도 매우 어려운데</p>\n<p>나중에 폴더마다 index.js를 만들어 import하기 쉽게 만들어야겠다.</p>\n","summary":"<p>자바스크립트 프로젝에서 상수를 관리하기 위한 방법을 설명하는 글.</p>\n","slug":"2017-10-03-js-import-export","link":"/blog/2017-10-03-js-import-export"}}]]}]
