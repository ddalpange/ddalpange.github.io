0:[[["",{"children":["blog",{"children":[["slug","2017-10-10-js-not-duplicated-object-array","d"],{"children":["__PAGE__?{\"slug\":\"2017-10-10-js-not-duplicated-object-array\"}",{}]}]}]},"$undefined","$undefined",true],"$L1","$L2"]]
3:I{"id":"2070","name":"","chunks":["131:131-718a907043a28311","185:app/layout-ee2bb0ff086a1e28"],"async":false}
4:I{"id":"7131","name":"","chunks":["131:131-718a907043a28311","931:app/page-59d2145bcde12638"],"async":false}
5:I{"id":"830","name":"","chunks":["272:webpack-a84c954fa8715833","776:0b7c6ed9-60e4a7f8e855a262","474:474-c8c5eb3e5e298e46"],"async":false}
6:I{"id":"2079","name":"","chunks":["272:webpack-a84c954fa8715833","776:0b7c6ed9-60e4a7f8e855a262","474:474-c8c5eb3e5e298e46"],"async":false}
1:[["$","html",null,{"lang":"en","data-theme":"retro","children":[["$","head",null,{"children":[["$","link",null,{"rel":"preconnect","href":"https://cdn.jsdelivr.net"}],["$","link",null,{"rel":"stylesheet","type":"text/css","href":"https://cdn.jsdelivr.net/gh/orioncactus/pretendard/dist/web/variable/pretendardvariable.css"}]]}],["$","body",null,{"className":"flex flex-col items-center h-[100svh]","children":[["$","$L3",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-XR7V7MF96T","strategy":"afterInteractive"}],["$","$L3",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){window.dataLayer.push(arguments);}\n          gtag('js', new Date());\n\n          gtag('config', 'G-XR7V7MF96T');\n        "}],["$","div",null,{"className":"w-full max-w-3xl flex-grow","children":[["$","div",null,{"className":"navbar","children":[["$","div",null,{"className":"flex-1","children":["$","$L4",null,{"className":"p-2 hover:underline md:text-2xl font-bold flex gap-4 items-center","href":"/","children":"Yozzing Blog"}]}],["$","div",null,{"className":"flex-none","children":["$","div",null,{"className":"tabs","children":[["$","$L4",null,{"className":"tab","href":"/engineering","children":"Engineering"}],["$","$L4",null,{"className":"tab","href":"/essay","children":"Essay"}],["$","a",null,{"className":"tab","href":"https://github.com/ddalpange","children":["$","div",null,{"className":"avatar","children":["$","div",null,{"className":"w-8 rounded-full","children":["$","img",null,{"alt":"yozzing","src":"/blog/images/profile.jpeg"}]}]}]}]]}]}]]}],["$","div",null,{"className":"p-4 pb-10","children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["slug","2017-10-10-js-not-duplicated-object-array","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$L7","$@8"],"segment":"__PAGE__?{\"slug\":\"2017-10-10-js-not-duplicated-object-array\"}"}}],"segment":["slug","2017-10-10-js-not-duplicated-object-array","d"]}}],"segment":"blog"}}]}]]}]]}]]}],"$@9"]
8:[null,null,[]]
9:[null,null,[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3127ef311b686118.css","precedence":"next.js"}]]]
2:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"자바스크립트 오브젝트 배열 중복 삭제하기"}],["$","meta",null,{"name":"description","content":"<p>React, Vue, Angular 등 프론트엔드 프레임웍을 쓰면 Data에 따라 UI가 그려지기 때문에 어느정도 앱이 완성궤도에 올라오면 비지니스 로직 핸들링과 돔에 대한 퍼포먼스를 개선하는 성능최적화 작업이 대부분이다.</p>\n"}],null,[[["$","link",null,{"rel":"author","href":"https://github.io/ddalpange"}],["$","meta",null,{"name":"author","content":"ddalpange"}]]],null,null,["$","meta",null,{"name":"keywords","content":"Javascript,ES6,Underscore"}],null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
a:I{"id":"3969","name":"Disqus","chunks":["308:app/blog/[slug]/page-2754d756216a6ffc"],"async":false}
7:["$","article",null,{"className":"prose max-w-full flex flex-col items-center","children":[["$","span",null,{"className":"mb-2","children":"5년 이상 전"}],["$","h1",null,{"children":"자바스크립트 오브젝트 배열 중복 삭제하기"}],["$","div",null,{"children":["$","div",null,{"className":"prose self-center","children":[["$","p","0",{"children":"React, Vue, Angular 등 프론트엔드 프레임웍을 쓰면 Data에 따라 UI가 그려지기 때문에 어느정도 앱이 완성궤도에 올라오면 비지니스 로직 핸들링과 돔에 대한 퍼포먼스를 개선하는 성능최적화 작업이 대부분이다."}],"\n",["$","p","2",{"children":"가상 돔을 쓰는 프레임웍이면 데이터의 흐름 및 변화에 따라 자동으로 렌더링을 돌기 때문에 구조를 왠만큼 꼬거나 뎁스가 3~4뎁스를 넘기는게 아니라면 쾌적한 성능을 보장한다."}],"\n",["$","p","4",{"children":"비지니스 로직데이터를 핸들링하는 일을 개선하다보면 필히 오브젝트 배열의 특정 키값을 기준으로 중복을 제거해야할 일이 생기는데 그에 대한 방법을 포스팅해본다."}],"\n",["$","h3","6",{"children":"언더스코어의 uniq 메소드를 이용하는 방법"}],"\n",["$","pre","8",{"children":["$","code",null,{"children":"var data = [{'name': 'Amir', 'surname': 'Rahnama'}, {'name': 'Amir', 'surname': 'Stevens'}];\nvar non_duplidated_data = _.uniq(data, 'name'); \n"}]}],"\n",["$","p","10",{"children":[["$","a","0",{"href":"http://underscorejs.org/","children":"언더스코어"}],"를 사용한다면 위와 같이 구현할 수 있다."]}],"\n",["$","p","12",{"children":"개인적으로 언더스코어 라이브러리를 사용해 본적이 없고, 구현하는데 시간이 많이 걸리는 코드가 아닌 이상 라이브러리를 사용하지 않는 편이기 때문에 사용한 적이 없는 방법이다."}],"\n",["$","h3","14",{"children":"ES6 문법 사용"}],"\n",["$","pre","16",{"children":["$","code",null,{"children":"function getUniqueObjectArray(array, key) {\n  return array.filter((item, i) => {\n    return array.findIndex((item2, j) => {\n      return item.key === item2.key;\n    }) === i;\n  });\n}\n"}]}],"\n",["$","p","18",{"children":["코드가 단순하고 쉬우며 직관적이지만 ",["$","strong","1",{"children":"ES6"}],"에서 지원하는 메소드이기 때문에 바벨로 트랜스파일을 해야하며, 경우에 따라 익스플로러를 지원해야할 경우 폴리필을 적용해야한다."]}],"\n",["$","p","20",{"children":"프로젝트의 환경에 따라 위의 코드를 적용할지 말지 결정해야한다."}],"\n",["$","h3","22",{"children":"ES5 문법 사용"}],"\n",["$","pre","24",{"children":["$","code",null,{"children":"function getUniqueObjectArray(array, key) {\n  var tempArray = [];\n  var resultArray = [];\n  for(var i = 0; i < array.length; i++) {\n    var item = array[i]\n    if(temArray.include(item[key])) {\n      continue;\n    } else {\n      resultArray.push(item);\n      tempArray.push(item[key]);\n    }\n  }\n  return resultArray;\n}\n"}]}],"\n",["$","p","26",{"children":"가장 단순한 방법이다. 양이 제법 길긴 하지만 해당 펑션을 처음 보더라도 코드의 가독성이 어렵지 않은 편이기에 충분히 이해할수 있다.\nES6를 사용하지 않았기 때문에 비교적 크로스 브라우징 문제에 안전하다고 볼 수 있다 :)"}],"\n",["$","h3","28",{"children":"정리하며"}],"\n",["$","p","30",{"children":["위의 나온 세 방법만이 정답은 아니다.\n문법적으로 또는 이론적으로 이해가 어려운 방법들은 제외했으며 ",["$","strong","1",{"children":"JSON.stringify"}],"같은 메소드가 들어가는 방법은 성능에 좋지 않을것 같아 마찬가지로 제외하였다.\n스택오버플로를 찾아보면 굉장히 다양한 방법이 있다. 참고하여 자신만의 메소드를 만들면 좋을것 같다."]}],"\n",["$","hr","32",{"children":null}],"\n",["$","p","34",{"children":"참고문서"}],"\n",["$","ul","36",{"children":["\n",["$","li","1",{"children":"https://stackoverflow.com/questions/36032179/remove-duplicates-in-an-object-array-javascript"}],"\n",["$","li","3",{"children":"https://stackoverflow.com/questions/2218999/remove-duplicates-from-an-array-of-objects-in-javascript"}],"\n"]}],"\n"]}]}],["$","$La",null,{"post":{"title":"자바스크립트 오브젝트 배열 중복 삭제하기","date":"2017-10-10T15:10:12.000Z","thumbnail":null,"categories":["Javascript"],"tags":["Javascript","ES6","Underscore"],"toc":true,"content":"\nReact, Vue, Angular 등 프론트엔드 프레임웍을 쓰면 Data에 따라 UI가 그려지기 때문에 어느정도 앱이 완성궤도에 올라오면 비지니스 로직 핸들링과 돔에 대한 퍼포먼스를 개선하는 성능최적화 작업이 대부분이다.\n<!-- more -->\n가상 돔을 쓰는 프레임웍이면 데이터의 흐름 및 변화에 따라 자동으로 렌더링을 돌기 때문에 구조를 왠만큼 꼬거나 뎁스가 3~4뎁스를 넘기는게 아니라면 쾌적한 성능을 보장한다.\n\n비지니스 로직데이터를 핸들링하는 일을 개선하다보면 필히 오브젝트 배열의 특정 키값을 기준으로 중복을 제거해야할 일이 생기는데 그에 대한 방법을 포스팅해본다.\n\n\n### 언더스코어의 uniq 메소드를 이용하는 방법\n```js\nvar data = [{'name': 'Amir', 'surname': 'Rahnama'}, {'name': 'Amir', 'surname': 'Stevens'}];\nvar non_duplidated_data = _.uniq(data, 'name'); \n```\n[언더스코어](http://underscorejs.org/)를 사용한다면 위와 같이 구현할 수 있다.\n\n개인적으로 언더스코어 라이브러리를 사용해 본적이 없고, 구현하는데 시간이 많이 걸리는 코드가 아닌 이상 라이브러리를 사용하지 않는 편이기 때문에 사용한 적이 없는 방법이다.\n\n### ES6 문법 사용\n```js\nfunction getUniqueObjectArray(array, key) {\n  return array.filter((item, i) => {\n    return array.findIndex((item2, j) => {\n      return item.key === item2.key;\n    }) === i;\n  });\n}\n```\n\n코드가 단순하고 쉬우며 직관적이지만 **ES6**에서 지원하는 메소드이기 때문에 바벨로 트랜스파일을 해야하며, 경우에 따라 익스플로러를 지원해야할 경우 폴리필을 적용해야한다.\n\n프로젝트의 환경에 따라 위의 코드를 적용할지 말지 결정해야한다.\n\n### ES5 문법 사용\n```js\nfunction getUniqueObjectArray(array, key) {\n  var tempArray = [];\n  var resultArray = [];\n  for(var i = 0; i < array.length; i++) {\n    var item = array[i]\n    if(temArray.include(item[key])) {\n      continue;\n    } else {\n      resultArray.push(item);\n      tempArray.push(item[key]);\n    }\n  }\n  return resultArray;\n}\n```\n\n가장 단순한 방법이다. 양이 제법 길긴 하지만 해당 펑션을 처음 보더라도 코드의 가독성이 어렵지 않은 편이기에 충분히 이해할수 있다.\nES6를 사용하지 않았기 때문에 비교적 크로스 브라우징 문제에 안전하다고 볼 수 있다 :)\n\n### 정리하며\n위의 나온 세 방법만이 정답은 아니다. \n문법적으로 또는 이론적으로 이해가 어려운 방법들은 제외했으며 **JSON.stringify**같은 메소드가 들어가는 방법은 성능에 좋지 않을것 같아 마찬가지로 제외하였다.\n스택오버플로를 찾아보면 굉장히 다양한 방법이 있다. 참고하여 자신만의 메소드를 만들면 좋을것 같다.\n\n---\n참고문서\n- https://stackoverflow.com/questions/36032179/remove-duplicates-in-an-object-array-javascript\n- https://stackoverflow.com/questions/2218999/remove-duplicates-from-an-array-of-objects-in-javascript\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTk5MDUzMTU1LC0xMDkzMDI3Mjg2LDE5OT\nYxNTE4NzRdfQ==\n-->","contentHtml":"<p>React, Vue, Angular 등 프론트엔드 프레임웍을 쓰면 Data에 따라 UI가 그려지기 때문에 어느정도 앱이 완성궤도에 올라오면 비지니스 로직 핸들링과 돔에 대한 퍼포먼스를 개선하는 성능최적화 작업이 대부분이다.</p>\n<p>가상 돔을 쓰는 프레임웍이면 데이터의 흐름 및 변화에 따라 자동으로 렌더링을 돌기 때문에 구조를 왠만큼 꼬거나 뎁스가 3~4뎁스를 넘기는게 아니라면 쾌적한 성능을 보장한다.</p>\n<p>비지니스 로직데이터를 핸들링하는 일을 개선하다보면 필히 오브젝트 배열의 특정 키값을 기준으로 중복을 제거해야할 일이 생기는데 그에 대한 방법을 포스팅해본다.</p>\n<h3>언더스코어의 uniq 메소드를 이용하는 방법</h3>\n<pre><code>var data = [{'name': 'Amir', 'surname': 'Rahnama'}, {'name': 'Amir', 'surname': 'Stevens'}];\nvar non_duplidated_data = _.uniq(data, 'name'); \n</code></pre>\n<p><a href=\"http://underscorejs.org/\">언더스코어</a>를 사용한다면 위와 같이 구현할 수 있다.</p>\n<p>개인적으로 언더스코어 라이브러리를 사용해 본적이 없고, 구현하는데 시간이 많이 걸리는 코드가 아닌 이상 라이브러리를 사용하지 않는 편이기 때문에 사용한 적이 없는 방법이다.</p>\n<h3>ES6 문법 사용</h3>\n<pre><code>function getUniqueObjectArray(array, key) {\n  return array.filter((item, i) => {\n    return array.findIndex((item2, j) => {\n      return item.key === item2.key;\n    }) === i;\n  });\n}\n</code></pre>\n<p>코드가 단순하고 쉬우며 직관적이지만 <strong>ES6</strong>에서 지원하는 메소드이기 때문에 바벨로 트랜스파일을 해야하며, 경우에 따라 익스플로러를 지원해야할 경우 폴리필을 적용해야한다.</p>\n<p>프로젝트의 환경에 따라 위의 코드를 적용할지 말지 결정해야한다.</p>\n<h3>ES5 문법 사용</h3>\n<pre><code>function getUniqueObjectArray(array, key) {\n  var tempArray = [];\n  var resultArray = [];\n  for(var i = 0; i &#x3C; array.length; i++) {\n    var item = array[i]\n    if(temArray.include(item[key])) {\n      continue;\n    } else {\n      resultArray.push(item);\n      tempArray.push(item[key]);\n    }\n  }\n  return resultArray;\n}\n</code></pre>\n<p>가장 단순한 방법이다. 양이 제법 길긴 하지만 해당 펑션을 처음 보더라도 코드의 가독성이 어렵지 않은 편이기에 충분히 이해할수 있다.\nES6를 사용하지 않았기 때문에 비교적 크로스 브라우징 문제에 안전하다고 볼 수 있다 :)</p>\n<h3>정리하며</h3>\n<p>위의 나온 세 방법만이 정답은 아니다.\n문법적으로 또는 이론적으로 이해가 어려운 방법들은 제외했으며 <strong>JSON.stringify</strong>같은 메소드가 들어가는 방법은 성능에 좋지 않을것 같아 마찬가지로 제외하였다.\n스택오버플로를 찾아보면 굉장히 다양한 방법이 있다. 참고하여 자신만의 메소드를 만들면 좋을것 같다.</p>\n<hr>\n<p>참고문서</p>\n<ul>\n<li>https://stackoverflow.com/questions/36032179/remove-duplicates-in-an-object-array-javascript</li>\n<li>https://stackoverflow.com/questions/2218999/remove-duplicates-from-an-array-of-objects-in-javascript</li>\n</ul>\n","summary":"<p>React, Vue, Angular 등 프론트엔드 프레임웍을 쓰면 Data에 따라 UI가 그려지기 때문에 어느정도 앱이 완성궤도에 올라오면 비지니스 로직 핸들링과 돔에 대한 퍼포먼스를 개선하는 성능최적화 작업이 대부분이다.</p>\n","slug":"2017-10-10-js-not-duplicated-object-array","link":"/blog/2017-10-10-js-not-duplicated-object-array"}}]]}]
