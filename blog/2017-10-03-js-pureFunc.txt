0:[[["",{"children":["blog",{"children":[["slug","2017-10-03-js-pureFunc","d"],{"children":["__PAGE__?{\"slug\":\"2017-10-03-js-pureFunc\"}",{}]}]}]},"$undefined","$undefined",true],"$L1","$L2"]]
3:I{"id":"2070","name":"","chunks":["131:131-b649a46ff1b8d8bb","185:app/layout-7117d08aaaa65714"],"async":false}
4:I{"id":"7131","name":"","chunks":["131:131-b649a46ff1b8d8bb","931:app/page-1f103c5c36dee5a3"],"async":false}
5:I{"id":"830","name":"","chunks":["272:webpack-2d9ad5e2e62df6f6","776:0b7c6ed9-5895ea2b955a8219","474:474-2bfbc4a0bef14471"],"async":false}
6:I{"id":"2079","name":"","chunks":["272:webpack-2d9ad5e2e62df6f6","776:0b7c6ed9-5895ea2b955a8219","474:474-2bfbc4a0bef14471"],"async":false}
1:[["$","html",null,{"lang":"en","data-theme":"retro","children":[["$","head",null,{"children":[["$","link",null,{"rel":"preconnect","href":"https://cdn.jsdelivr.net"}],["$","link",null,{"rel":"stylesheet","type":"text/css","href":"https://cdn.jsdelivr.net/gh/orioncactus/pretendard/dist/web/variable/pretendardvariable.css"}]]}],["$","body",null,{"className":"flex flex-col items-center h-[100svh]","children":[["$","$L3",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-XR7V7MF96T","strategy":"afterInteractive"}],["$","$L3",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){window.dataLayer.push(arguments);}\n          gtag('js', new Date());\n\n          gtag('config', 'G-XR7V7MF96T');\n        "}],["$","div",null,{"className":"w-full max-w-3xl flex-grow","children":[["$","div",null,{"className":"navbar","children":[["$","div",null,{"className":"flex-1","children":["$","$L4",null,{"className":"p-2 hover:underline md:text-2xl font-bold flex gap-4 items-center","href":"/","children":"Yozzing Blog"}]}],["$","div",null,{"className":"flex-none","children":["$","div",null,{"className":"tabs","children":[["$","$L4",null,{"className":"tab","href":"/engineering","children":"Engineering"}],["$","$L4",null,{"className":"tab","href":"/essay","children":"Essay"}],["$","a",null,{"className":"tab","href":"https://github.com/ddalpange","children":["$","div",null,{"className":"avatar","children":["$","div",null,{"className":"w-8 rounded-full","children":["$","img",null,{"src":"/blog/images/profile.jpeg"}]}]}]}]]}]}]]}],["$","div",null,{"className":"p-4 pb-10","children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["slug","2017-10-03-js-pureFunc","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$L7","$@8"],"segment":"__PAGE__?{\"slug\":\"2017-10-03-js-pureFunc\"}"}}],"segment":["slug","2017-10-03-js-pureFunc","d"]}}],"segment":"blog"}}]}]]}]]}]]}],"$@9"]
2:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"순수 함수 (Pure Function)"}],["$","meta",null,{"name":"description","content":"<p>요즘 힙한 프로그래밍 기법중 하나인 순수함수에 대해 알아보자.</p>\n"}],null,[[["$","link",null,{"rel":"author","href":"https://github.io/ddalpange"}],["$","meta",null,{"name":"author","content":"ddalpange"}]]],null,null,["$","meta",null,{"name":"keywords","content":"Javascript,PureFunction"}],null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
7:["$","article",null,{"className":"prose max-w-full flex flex-col items-center","children":[["$","span",null,{"className":"mb-2","children":"over 5 years ago"}],["$","h1",null,{"children":"순수 함수 (Pure Function)"}],["$","div",null,{"children":["$","div",null,{"className":"prose self-center","children":[["$","p","0",{"children":"요즘 힙한 프로그래밍 기법중 하나인 순수함수에 대해 알아보자."}],"\n",["$","h3","2",{"children":"순수함수의 정의"}],"\n",["$","p","4",{"children":"순수 함수(pure function)는 순수 입력과 순수 출력으로 구성되어 있다. 즉 순수 함수는 부수 효과(Side-Effect)가 없는 함수이다. 사이드 이펙트가 없다면 함수는 언제, 어디서나, 몇번이든 동일한 출력을 갖는다. 즉 똑같은 입력값에 대하여 똑같은 출력값을 돌려주는 것 의외에 다른 기능은 하지 않아야 한다. 이런 개념을 참조 투명성이라고 한다."}],"\n",["$","p","6",{"children":["$","em",null,{"children":["$","strong",null,{"children":"부수효과 (Side Effect)"}]}]}],"\n",["$","blockquote","8",{"children":["\n",["$","p","1",{"children":"함수의 입력 -> 실행 -> 출력 과정에서 외부에 있는 어떠한 것에 의해 함수의 출력값이 바뀌는 것을 의미한다."}],"\n"]}],"\n",["$","p","10",{"children":["$","em",null,{"children":["$","strong",null,{"children":"참조 투명성 (referential transparency, RT)"}]}]}],"\n",["$","blockquote","12",{"children":["\n",["$","p","1",{"children":"모든 프로그램에 대해 어떤 표현식(expression) e를 모두 그 표현식의 결과로 치환해도 프로그램에 아무 영향이 없다면 그 표현식 e는 참조에 투명하다(referentially transparent)."}],"\n"]}],"\n",["$","pre","14",{"children":["$","code",null,{"children":"var outside = 2;\n\nvar F = function (x) {\n    var inside = outside + x;\n    return inside;\n}\n\nF(5);\n"}]}],"\n",["$","p","16",{"children":["위의 함수는 순수 함수가 아니다. 함수의 외부스코프에있는 ",["$","code","1",{"children":"outside"}],"의 값이 변하면 ",["$","code","3",{"children":"F(5)"}],"의 값도 같이 변하기 때문이다."]}],"\n",["$","p","18",{"children":["만약 ",["$","code","1",{"children":"outside"}],"가 ",["$","code","3",{"children":"var"}],"가 아닌 ",["$","code","5",{"children":"const"}],"로 선언되었다면 함수 F는 순수 함수라 할 수 있다. 외부 변수인 ",["$","code","7",{"children":"outside"}],"는 읽기 전용이며, 값이 바뀔 염려가 없기 때문이다."]}],"\n",["$","h3","20",{"children":"순수함수의 장점은 무엇인가?"}],"\n",["$","ol","22",{"children":["\n",["$","li","1",{"children":"모듈성\n로직 처리에 쓰이는 모든 변수를 파라미터로 받는다면, 함수의 모듈성은 크게 증가한다. 한 클래스의 메소드를 다른 클래스에서 다른 쪽에서 쓸 일이 생긴다면, 공통유틸에 이동하기만 하면 되기 때문이다."}],"\n",["$","li","3",{"children":["테스트\n함수에서 로직을 처리할 때 모든 것을 ",["$","code","1",{"children":"this"}]," 에서 참조한다고 가정할 때 클래스가 커지면 전역 프로퍼티의 흐름을 알 수 없기 때문에, 디버깅이 매우 어렵다."]}],"\n"]}],"\n",["$","h3","24",{"children":"의문을 가져보자."}],"\n",["$","p","26",{"children":"** 입력값에 영향을 준다면 그것은 순수함수라고 할 수 있는가? **"}],"\n",["$","pre","28",{"children":["$","code",null,{"children":"var test = function (string) {\n    return test + 'world';\n}\n\nvar string = 'hello';\n\nconsole.log(test(string)); // 'hello world';\nconsole.log(string); // 'hello'\n"}]}],"\n",["$","pre","30",{"children":["$","code",null,{"children":"var test2 = function (array) {\n    return array.push('world');\n}\n\nvar array = ['hello'];\nconsole.log(test(array).join(' ')); // 'hello world'\nconsole.log(array.join(' ')); // 'hello world'\n"}]}],"\n",["$","p","32",{"children":["위의 함수는 함수에 파라미터로 전달한 ",["$","code","1",{"children":"string"}]," 변수의 값이 함수 ",["$","code","3",{"children":"test"}],"를 실행한 후에도 영향을 받지 않았지만, 아래 예제의 ",["$","code","5",{"children":"array"}],"는 입력 변수의 값이 바뀌어 버렸다.\n기본적으로 자바스크립트에서 ",["$","code","7",{"children":"string"}],"은 불변 객체이고, ",["$","code","9",{"children":"array"}],"는 가변 객체이기 때문이다. 생각해보자. ",["$","code","11",{"children":"test2"}]," 함수는 ",["$","strong","13",{"children":"순수 함수라고 할 수 있는가?"}]," (사내 스터디중 경력자 분께 직접 물어본 질문이다.)"]}],"\n",["$","p","34",{"children":"경력자분은 \"순수함수라 할 수 있다.\" 라고 대답하셨다. 순수 함수에서 입력값의 변화에 관한건 정의가 되어있지 않기 때문에, 입력값의 변경 여부는 순수함수와는 거리가 멀다는 의견이었다.\n하지만 내 생각은 좀 다르다. 인풋으로 들어간 값이 불변이 아니라 가변이여서 함수를 호출할 때마다 바뀐다면, 함수를 매번 호출할때마다 값이 다르게 나올 것이다. 특히 멀티 스레드나 멀티 프로세싱과 같이 한 데이터를 동시에 병렬처리를 진행한다면, 원하지 않는 값이 매번 도출될 것이다."}],"\n",["$","p","36",{"children":"그래서 파라미터로 넘겨준 값은 함수가 실행된 후에도 변하지 않아야 한다는게 내 생각이다."}],"\n",["$","p","38",{"children":["최종적으로 순수함수에 대해 정의를 내려보자면 ",["$","em","1",{"children":["$","strong",null,{"children":"순수함수는 부수효과가 없으며 입력값이 같으면 동일한 출력값을 내뱉고 입력값에 영향을 주지 않는 함수이다."}]}]," 라고 할 수 있겠다."]}],"\n"]}]}]]}]
8:[null,null,[]]
9:[null,null,[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c6b1e47f9d5235e8.css","precedence":"next.js"}]]]
