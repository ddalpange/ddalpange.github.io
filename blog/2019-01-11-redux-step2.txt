0:[[["",{"children":["blog",{"children":[["slug","2019-01-11-redux-step2","d"],{"children":["__PAGE__?{\"slug\":\"2019-01-11-redux-step2\"}",{}]}]}]},"$undefined","$undefined",true],"$L1","$L2"]]
3:I{"id":"2070","name":"","chunks":["131:131-b649a46ff1b8d8bb","185:app/layout-77153d09ec71e1b8"],"async":false}
4:I{"id":"7131","name":"","chunks":["131:131-b649a46ff1b8d8bb","931:app/page-d55a3db7a3ed8315"],"async":false}
5:I{"id":"830","name":"","chunks":["272:webpack-1b75aaef18416899","776:0b7c6ed9-5895ea2b955a8219","474:474-2bfbc4a0bef14471"],"async":false}
6:I{"id":"2079","name":"","chunks":["272:webpack-1b75aaef18416899","776:0b7c6ed9-5895ea2b955a8219","474:474-2bfbc4a0bef14471"],"async":false}
1:[["$","html",null,{"lang":"en","data-theme":"retro","children":[["$","head",null,{"children":["$","link",null,{"rel":"stylesheet","type":"text/css","href":"https://cdn.jsdelivr.net/gh/orioncactus/pretendard/dist/web/variable/pretendardvariable.css"}]}],["$","body",null,{"className":"flex flex-col items-center h-[100svh]","children":[["$","$L3",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-XR7V7MF96T","strategy":"afterInteractive"}],["$","$L3",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){window.dataLayer.push(arguments);}\n          gtag('js', new Date());\n\n          gtag('config', 'G-XR7V7MF96T');\n        "}],["$","div",null,{"className":"w-full max-w-3xl flex-grow","children":[["$","div",null,{"className":"navbar bg-base-100","children":[["$","div",null,{"className":"flex-1","children":["$","$L4",null,{"className":"p-2 hover:underline md:text-2xl font-bold flex gap-4 items-center","href":"/","children":"Yozzing Blog"}]}],["$","div",null,{"className":"flex-none","children":["$","div",null,{"className":"tabs","children":[["$","$L4",null,{"className":"tab","href":"/engineering","children":"엔지니어링"}],["$","$L4",null,{"className":"tab","href":"/essay","children":"에세이"}],["$","a",null,{"className":"tab","href":"https://github.com/ddalpange","children":["$","div",null,{"className":"avatar","children":["$","div",null,{"className":"w-8 rounded-full","children":["$","img",null,{"src":"/blog/images/profile.jpeg"}]}]}]}]]}]}]]}],["$","div",null,{"className":"p-4 pb-10","children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["slug","2019-01-11-redux-step2","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$L7","$@8"],"segment":"__PAGE__?{\"slug\":\"2019-01-11-redux-step2\"}"}}],"segment":["slug","2019-01-11-redux-step2","d"]}}],"segment":"blog"}}]}]]}]]}]]}],"$@9"]
8:[null,null,[]]
9:[null,null,[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d71785f3ad35c274.css","precedence":"next.js"}]]]
2:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"Redux 마스터하기 - 리덕스의 미들웨어에 대하여 알아보자."}],["$","meta",null,{"name":"description","content":"<p><code>Redux</code>는 <code>Action</code>이 <code>Reducer</code>에 전해지기 전 해야할 작업을 정의할 수 있는 미들웨어를 지원한다. <code>Redux</code>의 비동기 작업들을 도와주는 미들웨어에 대하여 알아보자.</p>\n"}],null,[[["$","link",null,{"rel":"author","href":"https://github.io/ddalpange"}],["$","meta",null,{"name":"author","content":"ddalpange"}]]],null,null,["$","meta",null,{"name":"keywords","content":"Redux,Flux"}],null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
7:["$","article",null,{"className":"prose","children":[["$","h1",null,{"children":"Redux 마스터하기 - 리덕스의 미들웨어에 대하여 알아보자."}],["$","caption",null,{"children":"2019/01/11"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"<p><code>Redux</code>는 <code>Action</code>이 <code>Reducer</code>에 전해지기 전 해야할 작업을 정의할 수 있는 미들웨어를 지원한다. <code>Redux</code>의 비동기 작업들을 도와주는 미들웨어에 대하여 알아보자.</p>\n<pre><code>let todoId = 0;\nexport const addTodo = text =>\n  new Promise(resolve => {\n    window.setTimeout(() => {\n      resolve({\n        text: text,\n        id: todoId++,\n        completed: false\n      });\n    }, 2000);\n  });\n</code></pre>\n<p><code>setTimeout</code>을 걸어 <code>Promise</code>를 반환하는 비동기 작업을 임시로 구현하였다. 위와 같은 비동기 작업이 있을때 <code>Redux</code>의 <code>Action</code>은 어떻게 처리해야 할까?</p>\n<h2>Async / Await</h2>\n<p>간단하게 <strong>Async / Await</strong> 를 이용하여 동기적으로 구현할 수 있을것 같아서 테스트해보았다. 코드는 다음과 같다.</p>\n<pre><code>import * as Api from \"./api\";\nexport const addTodo = async text => await Api.addTodo(text);\n</code></pre>\n<p>돌려보니 <code>Actions must be plain objects. Use custom middleware for async actions.</code>라는 에러가 뜨면서 되질 않는다. 액션은 순수한 객체여야 하며 비동기 액션을 위해서는 커스텀 미들웨어를 쓰라는 뜻이다.</p>\n<h2>Redux Thunk</h2>\n<p>대표적으로 많이들 쓰는 <a href=\"https://github.com/reduxjs/redux-thunk\">redux-thunk</a>에 대하여 알아보자.</p>\n<pre><code>npm install -S redux-thunk\n</code></pre>\n<p>기존 <code>action -> addTodo</code>는 단순한 <strong>객체</strong>를 리턴했지만 이제 비동기를 처리하기 위해 <strong>dispatch를 인자로 받고 그에 대한 작업을 promise로 반환하는 함수</strong>를 리턴해야한다.\n<code>redux-thunk</code>는 단순히 <code>action</code>에서 반환되어온 함수에 <code>dispatch</code>를 인자로 넣어 실행할 뿐이다. <code>redux-thunk</code>를 적용한 코드는 아래와 같다.</p>\n<pre><code>import { createStore, applyMiddleware } from \"redux\";\nimport { addTodo } from \"./actions\";\nimport reducers from \"./reducers\";\nimport ReduxThunk from \"redux-thunk\";\nconst store = createStore(reducers, applyMiddleware(ReduxThunk));\nlog(\"before\", store.getState());\nstore.dispatch(addTodo(\"Hello world\")).then(() => {\n  log(\"after\", store.getState());\n});\nfunction log(label, json) {\n  const app = document.getElementById(\"app\");\n  app.innerHTML += `&#x3C;h1>${label}&#x3C;h1>`;\n  app.innerHTML += `&#x3C;pre>${JSON.stringify(json, undefined, 2)}&#x3C;/pre>`;\n}\n</code></pre>\n<pre><code>import * as Api from \"./api\";\nexport const addTodo = text => dispatch =>\n  Api.addTodo(text).then(todo => dispatch({ type: \"ADD_TODO\", newTodo: todo }));\n</code></pre>\n<p><code>action</code>이 <code>Promise</code>를 반환한다는거 외에는 크게 달라진점이 없다. 나머지 <code>getTodos</code>, <code>editTodos</code>, <code>removeTodos</code>도 액션과 리듀서에 추가해보자.</p>\n<pre><code>const todos = [\n  {\n    text: \"First Todo\",\n    id: 0,\n    completed: false\n  }\n];\nlet todoId = 1;\nexport const getTodos = () =>\n  new Promise(resolve => {\n    window.setTimeout(() => {\n      resolve(todos);\n    }, 2000);\n  });\nexport const addTodo = text =>\n  new Promise(resolve => {\n    window.setTimeout(() => {\n      resolve({\n        text: text,\n        id: todoId++,\n        completed: false\n      });\n    }, 2000);\n  });\nexport const editTodo = newTodo =>\n  new Promise(resolve => {\n    window.setTimeout(() => {\n      const todoIndex = todos.find(todo => todo.id === newTodo.id);\n      todos[todoIndex] = { ...todos[todoIndex], ...newTodo };\n      resolve(todos[todoIndex]);\n    }, 2000);\n  });\nexport const removeTodo = todoId =>\n  new Promise(resolve => {\n    window.setTimeout(() => {\n      todos.splice(todos.findIndex(todo => todo.id === todoId));\n      resolve(todoId);\n    }, 2000);\n  });\n</code></pre>\n<pre><code>import * as Api from \"./api\";\nexport const addTodo = text => dispatch =>\n  Api.addTodo(text).then(res => dispatch({ type: \"ADD_TODO\", newTodo: res }));\nexport const editTodo = newTodo => dispatch =>\n  Api.editTodo(newTodo).then(res =>\n    dispatch({ type: \"EDIT_TODO\", newTodo: res })\n  );\nexport const removeTodo = todoId => dispatch =>\n  Api.removeTodo(todoId).then(res =>\n    dispatch({ type: \"REMOVE_TODO\", todoId: res })\n  );\nexport const getTodos = () => dispatch =>\n  Api.getTodos().then(res => dispatch({ type: \"GET_TODOS\", todos: res }));\n</code></pre>\n<pre><code>import { combineReducers } from \"redux\";\nexport default combineReducers({\n  todos: (todos = [], action) => {\n    switch (action.type) {\n      case \"GET_TODOS\":\n        return action.todos;\n      case \"ADD_TODO\":\n        return [...todos, action.newTodo];\n      case \"REMOVE_TODO\":\n        return todos.filter(todo => todo.id !== action.todoId);\n      case \"EDIT_TODO\":\n        const sliced = todos.slice();\n        const index = sliced.findIndex(todo => todo.id === action.newTodo.id);\n        if (index > -1) sliced[index] = action.newTodo;\n        return sliced;\n      default:\n        return todos;\n    }\n  }\n});\n</code></pre>\n<pre><code>import { createStore, applyMiddleware } from \"redux\";\nimport { addTodo, getTodos, editTodo, removeTodo } from \"./actions\";\nimport reducers from \"./reducers\";\nimport ReduxThunk from \"redux-thunk\";\nconst store = createStore(reducers, applyMiddleware(ReduxThunk));\nstart();\nasync function start() {\n  log(\"initial\", store.getState());\n  await store.dispatch(getTodos());\n  log(\"getTodos\", store.getState());\n  await store.dispatch(addTodo(\"Hello Todo!\"));\n  log(\"addTodos\", store.getState());\n  await store.dispatch(\n    editTodo({\n      id: store.getState().todos[0].id,\n      completed: true,\n      text: \"Edited!\"\n    })\n  );\n  log(\"editTodo\", store.getState());\n  await store.dispatch(removeTodo(store.getState().todos[0].id));\n  log(\"removeTodo\", store.getState());\n}\nfunction log(label, json) {\n  const app = document.getElementById(\"app\");\n  app.innerHTML += `&#x3C;h1>${label}&#x3C;h1>`;\n  app.innerHTML += `&#x3C;pre>${JSON.stringify(json, undefined, 2)}&#x3C;/pre>`;\n}\n</code></pre>\n<p>기본적인 <code>CRUD</code> 작업을 완료하였다. 다음 포스트에서는 <code>react</code>와 <code>react-redux</code>를 이용해 뷰를 만드는 작업을 진행한다.\nCodeSandBox에 예제를 올려두었으니 참고하면 된다.</p>\n"}}]]}]
