0:[[["",{"children":["blog",{"children":[["slug","2019-01-09-redux-step1","d"],{"children":["__PAGE__?{\"slug\":\"2019-01-09-redux-step1\"}",{}]}]}]},"$undefined","$undefined",true],"$L1","$L2"]]
3:I{"id":"2070","name":"","chunks":["131:131-b649a46ff1b8d8bb","185:app/layout-87ffce805221756c"],"async":false}
4:I{"id":"7131","name":"","chunks":["131:131-b649a46ff1b8d8bb","931:app/page-2232f5a403b269c2"],"async":false}
5:I{"id":"830","name":"","chunks":["272:webpack-f52214c701e5e4ec","776:0b7c6ed9-5895ea2b955a8219","474:474-2bfbc4a0bef14471"],"async":false}
6:I{"id":"2079","name":"","chunks":["272:webpack-f52214c701e5e4ec","776:0b7c6ed9-5895ea2b955a8219","474:474-2bfbc4a0bef14471"],"async":false}
1:[["$","html",null,{"lang":"en","data-theme":"retro","children":[["$","head",null,{"children":["$","link",null,{"rel":"stylesheet","type":"text/css","href":"https://cdn.jsdelivr.net/gh/orioncactus/pretendard/dist/web/variable/pretendardvariable.css"}]}],["$","body",null,{"className":"flex flex-col items-center h-[100svh]","children":[["$","$L3",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-XR7V7MF96T","strategy":"afterInteractive"}],["$","$L3",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){window.dataLayer.push(arguments);}\n          gtag('js', new Date());\n\n          gtag('config', 'G-XR7V7MF96T');\n        "}],["$","div",null,{"className":"w-full max-w-3xl flex-grow","children":[["$","div",null,{"className":"navbar","children":[["$","div",null,{"className":"flex-1","children":["$","$L4",null,{"className":"p-2 hover:underline md:text-2xl font-bold flex gap-4 items-center","href":"/","children":"Yozzing Blog"}]}],["$","div",null,{"className":"flex-none","children":["$","div",null,{"className":"tabs","children":[["$","$L4",null,{"className":"tab","href":"/engineering","children":"Engineering"}],["$","$L4",null,{"className":"tab","href":"/essay","children":"Essay"}],["$","a",null,{"className":"tab","href":"https://github.com/ddalpange","children":["$","div",null,{"className":"avatar","children":["$","div",null,{"className":"w-8 rounded-full","children":["$","img",null,{"src":"/blog/images/profile.jpeg"}]}]}]}]]}]}]]}],["$","div",null,{"className":"p-4 pb-10","children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["slug","2019-01-09-redux-step1","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$L7","$@8"],"segment":"__PAGE__?{\"slug\":\"2019-01-09-redux-step1\"}"}}],"segment":["slug","2019-01-09-redux-step1","d"]}}],"segment":"blog"}}]}]]}]]}]]}],"$@9"]
8:[null,null,[]]
9:[null,null,[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/26e6607032fead05.css","precedence":"next.js"}]]]
2:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"Redux 마스터하기 - 리덕스란 무엇인가"}],["$","meta",null,{"name":"description","content":"<p>현재 <code>RxJS</code>와 <code>Vuex</code>를 쓰고 있는데 뭐니뭐니해도 대세는 <code>Redux</code>다. <code>Redux</code>를 심도깊게 본적이 없어서 이번기회에 정리할려고 한다. 많은 사람들이 <code>React</code>와 <code>Redux</code>를 세트메뉴로 생각하시는 분들이 많은데 나는 그냥 <code>Redux</code>에만 초점을 맞추고자 한다. 이번 포스트에는 간단히 <code>Redux</code>와 <code>Flux</code>의 차이를 알아보고 리덕스를 구현해보자.</p>\n"}],null,[[["$","link",null,{"rel":"author","href":"https://github.io/ddalpange"}],["$","meta",null,{"name":"author","content":"ddalpange"}]]],null,null,["$","meta",null,{"name":"keywords","content":"Redux,Flux"}],null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
7:["$","article",null,{"className":"prose","children":[["$","h1",null,{"children":"Redux 마스터하기 - 리덕스란 무엇인가"}],["$","caption",null,{"children":"2019/01/09"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"<p>현재 <code>RxJS</code>와 <code>Vuex</code>를 쓰고 있는데 뭐니뭐니해도 대세는 <code>Redux</code>다. <code>Redux</code>를 심도깊게 본적이 없어서 이번기회에 정리할려고 한다. 많은 사람들이 <code>React</code>와 <code>Redux</code>를 세트메뉴로 생각하시는 분들이 많은데 나는 그냥 <code>Redux</code>에만 초점을 맞추고자 한다. 이번 포스트에는 간단히 <code>Redux</code>와 <code>Flux</code>의 차이를 알아보고 리덕스를 구현해보자.</p>\n<h2>작성 예정 포스트</h2>\n<ol>\n<li>리덕스란 무엇인가</li>\n<li>리덕스의 미들웨어에 대하여 알아보자.</li>\n<li>리액트와 리덕스를 연결해보자.</li>\n<li>리덕스청크와 리덕스사가의 차이점은?</li>\n</ol>\n<h2>Redux와 Flux의 차이점</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/949/1*3lvNEQE4SF6Z1l-680cfSQ.jpeg\" alt=\"Redux와 Flux의 차이\"></p>\n<p><code>Flux</code>와 대비되는 <code>Redux</code>의 주요 특징을 꼽자면 <strong>하나의 스토어</strong>와 <strong>리듀서</strong> 그리고 <strong>불변</strong>이라는 개념을 탑재했다. 어려워보이지만 별거 없다. 하나하나 따라치며 구현하다 보면 저절로 생각이 정리될 것이다.</p>\n<h2>코드로 구현해보자</h2>\n<pre><code>npm i -S redux\n</code></pre>\n<pre><code>let nextTodoId = 0;\n\nexport const addTodo = text => ({\n  type: \"ADD_TODO\",\n  id: nextTodoId++,\n  text\n});\n</code></pre>\n<pre><code>import { combineReducers } from \"redux\";\n\nexport default combineReducers({\n  todos: (todos = [], action) => {\n    switch (action.type) {\n      case \"ADD_TODO\":\n        return [\n          ...todos,\n          {\n            id: action.id,\n            text: action.text,\n            completed: false\n          }\n        ];\n      default:\n        return todos;\n    }\n  }\n});\n</code></pre>\n<pre><code>import { createStore } from \"redux\";\nimport { addTodo } from \"./actions\";\nimport reducers from \"./reducers\";\n\nconst store = createStore(reducers);\n\nlog(\"before\", store.getState());\nstore.dispatch(addTodo(\"Hello world\"));\nlog(\"after\", store.getState());\n\nfunction log(label, json) {\n  const app = document.getElementById(\"app\");\n  app.innerHTML += `&#x3C;h1>${label}&#x3C;h1>`;\n  app.innerHTML += `&#x3C;pre>${JSON.stringify(json, undefined, 2)}&#x3C;/pre>`;\n}\n</code></pre>\n<p>간단하게 보자면 <code>action</code>에 비지니스 로직(비동기 통신 등)이 들어가고 리턴한 값을 <code>reducer</code>에서 <code>state</code>에 세팅한다.\n즉 <code>initial state</code> -> <code>action</code> -> <code>reducer</code> -> <code>changed state</code> 의 순서이다. 여기서 중요한 점은 <code>reducer</code>에서 들어온 인자값과 내뱉는 리턴값 사이의 종속성이 없어야하며, 인자가 아닌 외부 값들에 의하여 리턴값이 영향을 받아서는 안된다.\n즉 <code>reducer</code>는 <strong>순수함수</strong>여야만 한다. <strong>순수함수</strong>에 대한 설명은 이 <a href=\"https://ddalpange.github.io/2017/10/03/js-pureFunc/\">포스트</a>를 참고하면 좋다.</p>\n<h2>완성본 보기</h2>\n<p>CodeSandbox에 올려두었다.</p>\n<p>다음 포스트에서는<code>Action</code>에서 비동기 통신을 도와주는 미들웨어를 소개할 예정이다.</p>\n"}}]]}]
