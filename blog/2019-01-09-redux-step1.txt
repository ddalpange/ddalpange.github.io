1:HL["/_next/static/css/3127ef311b686118.css",{"as":"style"}]
0:[[["",{"children":["blog",{"children":[["slug","2019-01-09-redux-step1","d"],{"children":["__PAGE__?{\"slug\":\"2019-01-09-redux-step1\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3127ef311b686118.css","precedence":"next"}]],["$L3",null]]]]
4:I{"id":"8717","chunks":["146:static/chunks/146-0b9edffcecace5b8.js","185:static/chunks/app/layout-588365b8ca87dbfe.js"],"name":"","async":false}
5:I{"id":"3146","chunks":["146:static/chunks/146-0b9edffcecace5b8.js","179:static/chunks/app/essay/page-692c51b8a8fdf410.js"],"name":"","async":false}
6:I{"id":"9082","chunks":["272:static/chunks/webpack-a84c954fa8715833.js","763:static/chunks/3545d7d3-1319cab7d7f01495.js","895:static/chunks/895-890d488364659f80.js"],"name":"","async":false}
7:I{"id":"4127","chunks":["272:static/chunks/webpack-a84c954fa8715833.js","763:static/chunks/3545d7d3-1319cab7d7f01495.js","895:static/chunks/895-890d488364659f80.js"],"name":"","async":false}
2:[["$","html",null,{"lang":"en","data-theme":"retro","children":[["$","head",null,{"children":[["$","link",null,{"rel":"preconnect","href":"https://cdn.jsdelivr.net"}],["$","link",null,{"rel":"stylesheet","type":"text/css","href":"https://cdn.jsdelivr.net/gh/orioncactus/pretendard/dist/web/variable/pretendardvariable.css"}]]}],["$","body",null,{"className":"flex flex-col items-center h-[100svh]","children":[["$","$L4",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-XR7V7MF96T","strategy":"afterInteractive"}],["$","$L4",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){window.dataLayer.push(arguments);}\n          gtag('js', new Date());\n\n          gtag('config', 'G-XR7V7MF96T');\n        "}],["$","div",null,{"className":"w-full max-w-3xl flex-grow","children":[["$","div",null,{"className":"navbar","children":[["$","div",null,{"className":"flex-1","children":["$","$L5",null,{"className":"p-2 hover:underline md:text-2xl font-bold flex gap-4 items-center","href":"/","children":"Yozzing Blog"}]}],["$","div",null,{"className":"flex-none","children":["$","div",null,{"className":"tabs","children":[["$","$L5",null,{"className":"tab","href":"/engineering","children":"Engineering"}],["$","$L5",null,{"className":"tab","href":"/essay","children":"Essay"}],["$","a",null,{"className":"tab","href":"https://github.com/ddalpange","children":["$","div",null,{"className":"avatar","children":["$","div",null,{"className":"w-8 rounded-full","children":["$","img",null,{"alt":"yozzing","src":"/blog/images/profile.jpeg"}]}]}]}]]}]}]]}],["$","div",null,{"className":"p-4 pb-10","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["slug","2019-01-09-redux-step1","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$L8",null],"segment":"__PAGE__?{\"slug\":\"2019-01-09-redux-step1\"}"},"styles":[]}],"segment":["slug","2019-01-09-redux-step1","d"]},"styles":[]}],"segment":"blog"},"styles":[]}]}]]}]]}]]}],null]
3:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"Redux 마스터하기 - 리덕스란 무엇인가"}],["$","meta",null,{"name":"description","content":"<p>현재 <code>RxJS</code>와 <code>Vuex</code>를 쓰고 있는데 뭐니뭐니해도 대세는 <code>Redux</code>다. <code>Redux</code>를 심도깊게 본적이 없어서 이번기회에 정리할려고 한다. 많은 사람들이 <code>React</code>와 <code>Redux</code>를 세트메뉴로 생각하시는 분들이 많은데 나는 그냥 <code>Redux</code>에만 초점을 맞추고자 한다. 이번 포스트에는 간단히 <code>Redux</code>와 <code>Flux</code>의 차이를 알아보고 리덕스를 구현해보자.</p>\n"}],null,[[["$","link",null,{"rel":"author","href":"https://github.io/ddalpange"}],["$","meta",null,{"name":"author","content":"ddalpange"}]]],null,null,["$","meta",null,{"name":"keywords","content":"Redux,Flux"}],null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,null]
9:I{"id":"9432","chunks":["308:static/chunks/app/blog/[slug]/page-c76664ffa773d92a.js"],"name":"Disqus","async":false}
8:["$","article",null,{"className":"prose max-w-full flex flex-col items-center","children":[["$","span",null,{"className":"mb-2","children":"4년 이상 전"}],["$","h1",null,{"children":"Redux 마스터하기 - 리덕스란 무엇인가"}],["$","div",null,{"children":["$","div",null,{"className":"prose self-center","children":[["$","p","0",{"children":["현재 ",["$","code","1",{"children":"RxJS"}],"와 ",["$","code","3",{"children":"Vuex"}],"를 쓰고 있는데 뭐니뭐니해도 대세는 ",["$","code","5",{"children":"Redux"}],"다. ",["$","code","7",{"children":"Redux"}],"를 심도깊게 본적이 없어서 이번기회에 정리할려고 한다. 많은 사람들이 ",["$","code","9",{"children":"React"}],"와 ",["$","code","11",{"children":"Redux"}],"를 세트메뉴로 생각하시는 분들이 많은데 나는 그냥 ",["$","code","13",{"children":"Redux"}],"에만 초점을 맞추고자 한다. 이번 포스트에는 간단히 ",["$","code","15",{"children":"Redux"}],"와 ",["$","code","17",{"children":"Flux"}],"의 차이를 알아보고 리덕스를 구현해보자."]}],"\n",["$","h2","2",{"children":"작성 예정 포스트"}],"\n",["$","ol","4",{"children":["\n",["$","li","1",{"children":"리덕스란 무엇인가"}],"\n",["$","li","3",{"children":"리덕스의 미들웨어에 대하여 알아보자."}],"\n",["$","li","5",{"children":"리액트와 리덕스를 연결해보자."}],"\n",["$","li","7",{"children":"리덕스청크와 리덕스사가의 차이점은?"}],"\n"]}],"\n",["$","h2","6",{"children":"Redux와 Flux의 차이점"}],"\n",["$","p","8",{"children":["$","img",null,{"src":"https://cdn-images-1.medium.com/max/949/1*3lvNEQE4SF6Z1l-680cfSQ.jpeg","alt":"Redux와 Flux의 차이","children":null}]}],"\n",["$","p","10",{"children":[["$","code","0",{"children":"Flux"}],"와 대비되는 ",["$","code","2",{"children":"Redux"}],"의 주요 특징을 꼽자면 ",["$","strong","4",{"children":"하나의 스토어"}],"와 ",["$","strong","6",{"children":"리듀서"}]," 그리고 ",["$","strong","8",{"children":"불변"}],"이라는 개념을 탑재했다. 어려워보이지만 별거 없다. 하나하나 따라치며 구현하다 보면 저절로 생각이 정리될 것이다."]}],"\n",["$","h2","12",{"children":"코드로 구현해보자"}],"\n",["$","pre","14",{"children":["$","code",null,{"children":"npm i -S redux\n"}]}],"\n",["$","pre","16",{"children":["$","code",null,{"children":"let nextTodoId = 0;\n\nexport const addTodo = text => ({\n  type: \"ADD_TODO\",\n  id: nextTodoId++,\n  text\n});\n"}]}],"\n",["$","pre","18",{"children":["$","code",null,{"children":"import { combineReducers } from \"redux\";\n\nexport default combineReducers({\n  todos: (todos = [], action) => {\n    switch (action.type) {\n      case \"ADD_TODO\":\n        return [\n          ...todos,\n          {\n            id: action.id,\n            text: action.text,\n            completed: false\n          }\n        ];\n      default:\n        return todos;\n    }\n  }\n});\n"}]}],"\n",["$","pre","20",{"children":["$","code",null,{"children":"import { createStore } from \"redux\";\nimport { addTodo } from \"./actions\";\nimport reducers from \"./reducers\";\n\nconst store = createStore(reducers);\n\nlog(\"before\", store.getState());\nstore.dispatch(addTodo(\"Hello world\"));\nlog(\"after\", store.getState());\n\nfunction log(label, json) {\n  const app = document.getElementById(\"app\");\n  app.innerHTML += `<h1>${label}<h1>`;\n  app.innerHTML += `<pre>${JSON.stringify(json, undefined, 2)}</pre>`;\n}\n"}]}],"\n",["$","p","22",{"children":["간단하게 보자면 ",["$","code","1",{"children":"action"}],"에 비지니스 로직(비동기 통신 등)이 들어가고 리턴한 값을 ",["$","code","3",{"children":"reducer"}],"에서 ",["$","code","5",{"children":"state"}],"에 세팅한다.\n즉 ",["$","code","7",{"children":"initial state"}]," -> ",["$","code","9",{"children":"action"}]," -> ",["$","code","11",{"children":"reducer"}]," -> ",["$","code","13",{"children":"changed state"}]," 의 순서이다. 여기서 중요한 점은 ",["$","code","15",{"children":"reducer"}],"에서 들어온 인자값과 내뱉는 리턴값 사이의 종속성이 없어야하며, 인자가 아닌 외부 값들에 의하여 리턴값이 영향을 받아서는 안된다.\n즉 ",["$","code","17",{"children":"reducer"}],"는 ",["$","strong","19",{"children":"순수함수"}],"여야만 한다. ",["$","strong","21",{"children":"순수함수"}],"에 대한 설명은 이 ",["$","a","23",{"href":"https://ddalpange.github.io/2017/10/03/js-pureFunc/","children":"포스트"}],"를 참고하면 좋다."]}],"\n",["$","h2","24",{"children":"완성본 보기"}],"\n",["$","p","26",{"children":"CodeSandbox에 올려두었다."}],"\n",["$","p","28",{"children":["다음 포스트에서는",["$","code","1",{"children":"Action"}],"에서 비동기 통신을 도와주는 미들웨어를 소개할 예정이다."]}],"\n"]}]}],["$","$L9",null,{"post":{"title":"Redux 마스터하기 - 리덕스란 무엇인가","thumbnail":null,"date":"2019-01-09T18:39:55.000Z","tags":["Redux","Flux"],"categories":["Redux"],"content":"\n현재 `RxJS`와 `Vuex`를 쓰고 있는데 뭐니뭐니해도 대세는 `Redux`다. `Redux`를 심도깊게 본적이 없어서 이번기회에 정리할려고 한다. 많은 사람들이 `React`와 `Redux`를 세트메뉴로 생각하시는 분들이 많은데 나는 그냥 `Redux`에만 초점을 맞추고자 한다. 이번 포스트에는 간단히 `Redux`와 `Flux`의 차이를 알아보고 리덕스를 구현해보자.\n\n<!-- more -->\n\n## 작성 예정 포스트\n\n1. 리덕스란 무엇인가\n2. 리덕스의 미들웨어에 대하여 알아보자.\n3. 리액트와 리덕스를 연결해보자.\n4. 리덕스청크와 리덕스사가의 차이점은?\n\n## Redux와 Flux의 차이점\n\n![Redux와 Flux의 차이](https://cdn-images-1.medium.com/max/949/1*3lvNEQE4SF6Z1l-680cfSQ.jpeg)\n\n`Flux`와 대비되는 `Redux`의 주요 특징을 꼽자면 **하나의 스토어**와 **리듀서** 그리고 **불변**이라는 개념을 탑재했다. 어려워보이지만 별거 없다. 하나하나 따라치며 구현하다 보면 저절로 생각이 정리될 것이다.\n\n## 코드로 구현해보자\n\n```sh\nnpm i -S redux\n```\n\n```js actions.js\nlet nextTodoId = 0;\n\nexport const addTodo = text => ({\n  type: \"ADD_TODO\",\n  id: nextTodoId++,\n  text\n});\n```\n\n```js reducers.js\nimport { combineReducers } from \"redux\";\n\nexport default combineReducers({\n  todos: (todos = [], action) => {\n    switch (action.type) {\n      case \"ADD_TODO\":\n        return [\n          ...todos,\n          {\n            id: action.id,\n            text: action.text,\n            completed: false\n          }\n        ];\n      default:\n        return todos;\n    }\n  }\n});\n```\n\n```js index.js\nimport { createStore } from \"redux\";\nimport { addTodo } from \"./actions\";\nimport reducers from \"./reducers\";\n\nconst store = createStore(reducers);\n\nlog(\"before\", store.getState());\nstore.dispatch(addTodo(\"Hello world\"));\nlog(\"after\", store.getState());\n\nfunction log(label, json) {\n  const app = document.getElementById(\"app\");\n  app.innerHTML += `<h1>${label}<h1>`;\n  app.innerHTML += `<pre>${JSON.stringify(json, undefined, 2)}</pre>`;\n}\n```\n\n간단하게 보자면 `action`에 비지니스 로직(비동기 통신 등)이 들어가고 리턴한 값을 `reducer`에서 `state`에 세팅한다.\n즉 `initial state` -> `action` -> `reducer` -> `changed state` 의 순서이다. 여기서 중요한 점은 `reducer`에서 들어온 인자값과 내뱉는 리턴값 사이의 종속성이 없어야하며, 인자가 아닌 외부 값들에 의하여 리턴값이 영향을 받아서는 안된다.\n즉 `reducer`는 **순수함수**여야만 한다. **순수함수**에 대한 설명은 이 [포스트](https://ddalpange.github.io/2017/10/03/js-pureFunc/)를 참고하면 좋다.\n\n## 완성본 보기\n\nCodeSandbox에 올려두었다.\n\n<iframe src=\"https://codesandbox.io/embed/7jm4xr7lv6\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n\n다음 포스트에서는`Action`에서 비동기 통신을 도와주는 미들웨어를 소개할 예정이다.\n","contentHtml":"<p>현재 <code>RxJS</code>와 <code>Vuex</code>를 쓰고 있는데 뭐니뭐니해도 대세는 <code>Redux</code>다. <code>Redux</code>를 심도깊게 본적이 없어서 이번기회에 정리할려고 한다. 많은 사람들이 <code>React</code>와 <code>Redux</code>를 세트메뉴로 생각하시는 분들이 많은데 나는 그냥 <code>Redux</code>에만 초점을 맞추고자 한다. 이번 포스트에는 간단히 <code>Redux</code>와 <code>Flux</code>의 차이를 알아보고 리덕스를 구현해보자.</p>\n<h2>작성 예정 포스트</h2>\n<ol>\n<li>리덕스란 무엇인가</li>\n<li>리덕스의 미들웨어에 대하여 알아보자.</li>\n<li>리액트와 리덕스를 연결해보자.</li>\n<li>리덕스청크와 리덕스사가의 차이점은?</li>\n</ol>\n<h2>Redux와 Flux의 차이점</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/949/1*3lvNEQE4SF6Z1l-680cfSQ.jpeg\" alt=\"Redux와 Flux의 차이\"></p>\n<p><code>Flux</code>와 대비되는 <code>Redux</code>의 주요 특징을 꼽자면 <strong>하나의 스토어</strong>와 <strong>리듀서</strong> 그리고 <strong>불변</strong>이라는 개념을 탑재했다. 어려워보이지만 별거 없다. 하나하나 따라치며 구현하다 보면 저절로 생각이 정리될 것이다.</p>\n<h2>코드로 구현해보자</h2>\n<pre><code>npm i -S redux\n</code></pre>\n<pre><code>let nextTodoId = 0;\n\nexport const addTodo = text => ({\n  type: \"ADD_TODO\",\n  id: nextTodoId++,\n  text\n});\n</code></pre>\n<pre><code>import { combineReducers } from \"redux\";\n\nexport default combineReducers({\n  todos: (todos = [], action) => {\n    switch (action.type) {\n      case \"ADD_TODO\":\n        return [\n          ...todos,\n          {\n            id: action.id,\n            text: action.text,\n            completed: false\n          }\n        ];\n      default:\n        return todos;\n    }\n  }\n});\n</code></pre>\n<pre><code>import { createStore } from \"redux\";\nimport { addTodo } from \"./actions\";\nimport reducers from \"./reducers\";\n\nconst store = createStore(reducers);\n\nlog(\"before\", store.getState());\nstore.dispatch(addTodo(\"Hello world\"));\nlog(\"after\", store.getState());\n\nfunction log(label, json) {\n  const app = document.getElementById(\"app\");\n  app.innerHTML += `&#x3C;h1>${label}&#x3C;h1>`;\n  app.innerHTML += `&#x3C;pre>${JSON.stringify(json, undefined, 2)}&#x3C;/pre>`;\n}\n</code></pre>\n<p>간단하게 보자면 <code>action</code>에 비지니스 로직(비동기 통신 등)이 들어가고 리턴한 값을 <code>reducer</code>에서 <code>state</code>에 세팅한다.\n즉 <code>initial state</code> -> <code>action</code> -> <code>reducer</code> -> <code>changed state</code> 의 순서이다. 여기서 중요한 점은 <code>reducer</code>에서 들어온 인자값과 내뱉는 리턴값 사이의 종속성이 없어야하며, 인자가 아닌 외부 값들에 의하여 리턴값이 영향을 받아서는 안된다.\n즉 <code>reducer</code>는 <strong>순수함수</strong>여야만 한다. <strong>순수함수</strong>에 대한 설명은 이 <a href=\"https://ddalpange.github.io/2017/10/03/js-pureFunc/\">포스트</a>를 참고하면 좋다.</p>\n<h2>완성본 보기</h2>\n<p>CodeSandbox에 올려두었다.</p>\n<p>다음 포스트에서는<code>Action</code>에서 비동기 통신을 도와주는 미들웨어를 소개할 예정이다.</p>\n","summary":"<p>현재 <code>RxJS</code>와 <code>Vuex</code>를 쓰고 있는데 뭐니뭐니해도 대세는 <code>Redux</code>다. <code>Redux</code>를 심도깊게 본적이 없어서 이번기회에 정리할려고 한다. 많은 사람들이 <code>React</code>와 <code>Redux</code>를 세트메뉴로 생각하시는 분들이 많은데 나는 그냥 <code>Redux</code>에만 초점을 맞추고자 한다. 이번 포스트에는 간단히 <code>Redux</code>와 <code>Flux</code>의 차이를 알아보고 리덕스를 구현해보자.</p>\n","slug":"2019-01-09-redux-step1","link":"/blog/2019-01-09-redux-step1"}}]]}]
