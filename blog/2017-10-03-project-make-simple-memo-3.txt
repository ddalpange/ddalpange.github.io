0:[[["",{"children":["blog",{"children":[["slug","2017-10-03-project-make-simple-memo-3","d"],{"children":["__PAGE__?{\"slug\":\"2017-10-03-project-make-simple-memo-3\"}",{}]}]}]},"$undefined","$undefined",true],"$L1","$L2"]]
3:I{"id":"2070","name":"","chunks":["131:131-718a907043a28311","185:app/layout-ee2bb0ff086a1e28"],"async":false}
4:I{"id":"7131","name":"","chunks":["131:131-718a907043a28311","931:app/page-59d2145bcde12638"],"async":false}
5:I{"id":"830","name":"","chunks":["272:webpack-a84c954fa8715833","776:0b7c6ed9-60e4a7f8e855a262","474:474-c8c5eb3e5e298e46"],"async":false}
6:I{"id":"2079","name":"","chunks":["272:webpack-a84c954fa8715833","776:0b7c6ed9-60e4a7f8e855a262","474:474-c8c5eb3e5e298e46"],"async":false}
1:[["$","html",null,{"lang":"en","data-theme":"retro","children":[["$","head",null,{"children":[["$","link",null,{"rel":"preconnect","href":"https://cdn.jsdelivr.net"}],["$","link",null,{"rel":"stylesheet","type":"text/css","href":"https://cdn.jsdelivr.net/gh/orioncactus/pretendard/dist/web/variable/pretendardvariable.css"}]]}],["$","body",null,{"className":"flex flex-col items-center h-[100svh]","children":[["$","$L3",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-XR7V7MF96T","strategy":"afterInteractive"}],["$","$L3",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){window.dataLayer.push(arguments);}\n          gtag('js', new Date());\n\n          gtag('config', 'G-XR7V7MF96T');\n        "}],["$","div",null,{"className":"w-full max-w-3xl flex-grow","children":[["$","div",null,{"className":"navbar","children":[["$","div",null,{"className":"flex-1","children":["$","$L4",null,{"className":"p-2 hover:underline md:text-2xl font-bold flex gap-4 items-center","href":"/","children":"Yozzing Blog"}]}],["$","div",null,{"className":"flex-none","children":["$","div",null,{"className":"tabs","children":[["$","$L4",null,{"className":"tab","href":"/engineering","children":"Engineering"}],["$","$L4",null,{"className":"tab","href":"/essay","children":"Essay"}],["$","a",null,{"className":"tab","href":"https://github.com/ddalpange","children":["$","div",null,{"className":"avatar","children":["$","div",null,{"className":"w-8 rounded-full","children":["$","img",null,{"alt":"yozzing","src":"/blog/images/profile.jpeg"}]}]}]}]]}]}]]}],["$","div",null,{"className":"p-4 pb-10","children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["slug","2017-10-03-project-make-simple-memo-3","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$L7","$@8"],"segment":"__PAGE__?{\"slug\":\"2017-10-03-project-make-simple-memo-3\"}"}}],"segment":["slug","2017-10-03-project-make-simple-memo-3","d"]}}],"segment":"blog"}}]}]]}]]}]]}],"$@9"]
2:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"간단한 메모장 만들기 3 - 목데이터 사용"}],["$","meta",null,{"name":"description","content":"<p>이번 시간에서는 목 객체와 Angular2의 서비스(보통 아이오닉에선 provider 라고 명칭합니다.)를 이용해서 메모가 어떻게 만들어지고, 수정되고, 삭제되는지 알아볼겁니다. 틀리거나 안되는것이 있다면 바로바로 댓글로 달아주세요!</p>\n"}],null,[[["$","link",null,{"rel":"author","href":"https://github.io/ddalpange"}],["$","meta",null,{"name":"author","content":"ddalpange"}]]],null,null,["$","meta",null,{"name":"keywords","content":"Javascript,Angular,Ionic,SimpleMemo"}],null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
a:I{"id":"3969","name":"Disqus","chunks":["308:app/blog/[slug]/page-2754d756216a6ffc"],"async":false}
7:["$","article",null,{"className":"prose max-w-full flex flex-col items-center","children":[["$","span",null,{"className":"mb-2","children":"5년 이상 전"}],["$","h1",null,{"children":"간단한 메모장 만들기 3 - 목데이터 사용"}],["$","div",null,{"children":["$","div",null,{"className":"prose self-center","children":[["$","p","0",{"children":"이번 시간에서는 목 객체와 Angular2의 서비스(보통 아이오닉에선 provider 라고 명칭합니다.)를 이용해서 메모가 어떻게 만들어지고, 수정되고, 삭제되는지 알아볼겁니다. 틀리거나 안되는것이 있다면 바로바로 댓글로 달아주세요!"}],"\n",["$","p","2",{"children":["$","strong",null,{"children":"mock objects?"}]}],"\n",["$","blockquote","4",{"children":["\n",["$","p","1",{"children":"목 객체는 실제 객체의 동작을 흉내내는 시뮬레이션 객체입니다. 보통 프론트단에서 api와의 의존성을 없애고 테스트를 쉽게 하기 위해 하드코딩된 데이터들을 mock data라고 칭합니다."}],"\n"]}],"\n",["$","p","6",{"children":["$","strong",null,{"children":"service?"}]}],"\n",["$","blockquote","8",{"children":["\n",["$","p","1",{"children":"서비스는 애플리케이션 전반에 걸쳐 코드를 구성하고 공유하는 데 사용되며, 일반적으로 데이터 액세스 방법을 생성하는 곳이기도 합니다. 즉 재사용성이 높은 코드들을 모아놓은 것이며, Angular2에서 기본으로 제공해주는 패턴중의 하나입니다. 서비스를 이해할려면 DI(Dependency Injection)을 이해해야하는데, 포스트가 너무 길어지니 다음에 하죠."}],"\n"]}],"\n",["$","h3","10",{"children":"메모 인터페이스 정의하기"}],"\n",["$","p","12",{"children":[["$","strong","0",{"children":"src"}],"폴더에서 ",["$","strong","2",{"children":"models"}],", ",["$","strong","4",{"children":"memo"}]," 폴더를 차례대로 만들어 주신 후 그 안에 ",["$","strong","6",{"children":"memo.interface.ts"}],"파일을 만들어주세요"]}],"\n",["$","pre","14",{"children":["$","code",null,{"children":"export interface Memo {\n  key: number\n  author: string // 작성자\n  title: string // 제목\n  contents: string // 본문\n  publishedDate: Date // 작성일\n  recentUpdatedDate: Date // 최근 수정일\n}\n"}]}],"\n",["$","h3","16",{"children":"목 메모리스트 정의하기"}],"\n",["$","p","18",{"children":[["$","strong","0",{"children":"src"}],"폴더에서 ",["$","strong","2",{"children":"mocks"}],", ",["$","strong","4",{"children":"memo"}]," 폴더를 만들어 주신 후"]}],"\n",["$","p","20",{"children":["그 안에 ",["$","strong","1",{"children":"memo-list.mock.ts"}],"파일을 만들어주세요"]}],"\n",["$","pre","22",{"children":["$","code",null,{"children":"import { Memo } from \"./../../models/memo/memo.interface\"\nexport const MEMOLIST: Memo[] = [\n  {\n    key: 0,\n    title: \"제목 1\",\n    contents:\n      \"본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문\",\n    author: \"ddalpange@gmail.com\",\n    recentUpdatedDate: new Date(),\n    publishedDate: new Date(),\n  },\n  {\n    key: 1,\n    title: \"제목 2\",\n    contents:\n      \"본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문\",\n    author: \"ddalpange@gmail.com\",\n    recentUpdatedDate: new Date(),\n    publishedDate: new Date(),\n  },\n]\n"}]}],"\n",["$","h3","24",{"children":"메모 관리 서비스 만들기 !"}],"\n",["$","pre","26",{"children":["$","code",null,{"children":"$$ ionic g provider memo-manager\n"}]}],"\n",["$","p","28",{"children":["위 명령어를 실행하고 나면 ",["$","strong","1",{"children":"providers"}],"라는 폴더가 ",["$","strong","3",{"children":"src"}]," 폴더에 생길거에요!\nIonic Cli로 만든 provider는 앱 모듈에 자동으로 추가(registering)됩니다."]}],"\n",["$","pre","30",{"children":["$","code",null,{"children":"import { MEMOLIST } from \"./../../mocks/memo/memo-list.mock\"\nimport { Memo } from \"./../../models/memo/memo.interface\"\nimport { Injectable } from \"@angular/core\"\nimport { Http } from \"@angular/http\"\n\n/*\n  Generated class for the MemoManagerProvider provider.\n\n  See https://angular.io/docs/ts/latest/guide/dependency-injection.html\n  for more info on providers and Angular DI.\n*/\n@Injectable()\nexport class MemoManagerProvider {\n  memoList: Memo[]\n\n  constructor(public http: Http) {\n    this.initMemoList()\n  }\n\n  initMemoList() {\n    this.memoList = MEMOLIST\n  }\n\n  getMemoList(): Memo[] {\n    return this.memoList\n  }\n\n  getMemo(key: number): Memo {\n    let index = this.memoList.findIndex((memo: Memo, i: number) => {\n      return memo.key === key\n    })\n\n    return this.memoList[index] || null\n  }\n\n  createMemo(title: string, contents: string, author: string) {\n    let lastMemo = this.memoList[this.memoList.length - 1]\n    let lastMemoKey = lastMemo ? lastMemo.key : -1\n    let key = lastMemoKey + 1\n\n    let memo: Memo = {\n      key: key,\n      title: title,\n      contents: contents,\n      author: author,\n      publishedDate: new Date(),\n      recentUpdatedDate: new Date(),\n    }\n\n    this.memoList.push(memo)\n  }\n\n  deleteMemo(deleteMemo: Memo) {\n    let index = this.memoList.findIndex((memo: Memo, i: number) => {\n      return memo.key === deleteMemo.key\n    })\n\n    this.memoList.splice(index, 1)\n  }\n\n  editMemo(changeMemo: Memo, title: string, contents: string) {\n    let index = this.memoList.findIndex((memo: Memo, i: number) => {\n      return memo.key === changeMemo.key\n    })\n\n    this.memoList[index].title = title\n    this.memoList[index].contents = contents\n    this.memoList[index].recentUpdatedDate = new Date()\n  }\n}\n"}]}],"\n",["$","p","32",{"children":"잘 되는지 메모 리스트 페이지에서 메모 매니저를 주입(DI) 받아보겠습니다."}],"\n",["$","p","34",{"children":"메모 리스트페이지의 constructor 부분을 아래와 같이 바꿔주세요."}],"\n",["$","pre","36",{"children":["$","code",null,{"children":"...\nimport { MemoManagerProvider } from './../../providers/memo-manager/memo-manager';\n\n...\n\nexport class MemoListPage {\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public memoManager: MemoManagerProvider) {\n  }\n  .....\n}\n"}]}],"\n",["$","p","38",{"children":["$","strong",null,{"children":"여기까지 !"}]}],"\n",["$","p","40",{"children":"잠시 숨 고르시고 에러 안나는지 살펴보세요."}],"\n",["$","p","42",{"children":"이제 페이지들의 뷰에 각 데이터들을 연동하고, 메모 매니저를 주입(DI)받아서 메모를 쓰기, 수정 삭제, 보기 할 수 있는 기능을 만들거에요."}],"\n",["$","pre","44",{"children":["$","code",null,{"children":"import { Memo } from \"./../../mod els/memo/memo.interface\"\nimport { Component, OnInit } from \"@angular/core\"\nimport { IonicPage, NavController, NavParams } from \"ionic-angular\"\n\nimport { MemoCreatePage } from \"./../memo-create/memo-create\"\nimport { MemoDetailPage } from \"./../memo-detail/memo-detail\"\n\nimport { MemoManagerProvider } from \"./../../providers/memo-manager/memo-manager\"\n@IonicPage()\n@Component({\n  selector: \"page-memo-list\",\n  templateUrl: \"memo-list.html\",\n})\nexport class MemoListPage {\n  memoList: Memo[] = []\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public memoManager: MemoManagerProvider\n  ) {}\n\n  ngOnInit() {\n    this.memoList = this.memoManager.getMemoList()\n    console.log(this.memoList)\n  }\n\n  onClickViewMemoDetail(memo: Memo) {\n    this.navCtrl.push(MemoDetailPage, { memo: memo })\n  }\n\n  onClickCreateMemo() {\n    this.navCtrl.push(MemoCreatePage)\n  }\n}\n"}]}],"\n",["$","pre","46",{"children":["$","code",null,{"children":"<ion-header>\n  <ion-navbar color=\"primary\">\n    <ion-title>메모들</ion-title>\n  </ion-navbar>\n</ion-header>\n<ion-content>\n  <ng-template ngFor let-memo [ngForOf]=\"memoList\" let-i=\"index\">\n    <ion-card (click)=\"onClickViewMemoDetail(memo)\">\n      <ion-card-header> {{ memo.title }} </ion-card-header>\n      <ion-card-content> {{ memo.contents }} </ion-card-content>\n    </ion-card>\n  </ng-template>\n  <ion-fab right bottom>\n    <button ion-fab icon-only (click)=\"onClickCreateMemo()\">\n      <ion-icon name=\"add\" big></ion-icon>\n    </button>\n  </ion-fab>\n</ion-content>\n"}]}],"\n",["$","pre","48",{"children":["$","code",null,{"children":"import { MemoManagerProvider } from \"./../../providers/memo-manager/memo-manager\"\nimport { Memo } from \"./../../models/memo/memo.interface\"\nimport { Component, OnInit } from \"@angular/core\"\nimport { IonicPage, NavController, NavParams } from \"ionic-angular\"\n\nimport { MemoCreatePage } from \"./../memo-create/memo-create\"\n\n@IonicPage()\n@Component({\n  selector: \"page-memo-detail\",\n  templateUrl: \"memo-detail.html\",\n})\nexport class MemoDetailPage {\n  memo: Memo\n  title: string\n  contents: string\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public memoManager: MemoManagerProvider\n  ) {}\n\n  ngOnInit() {\n    this.memo = this.navParams.get(\"memo\")\n  }\n\n  onOpenEditMemo(memo: Memo) {\n    this.navCtrl.push(MemoCreatePage, { memo: memo })\n  }\n\n  onDeleteMemo(memo: Memo) {\n    this.memoManager.deleteMemo(memo)\n    this.navCtrl.pop()\n  }\n}\n"}]}],"\n",["$","pre","50",{"children":["$","code",null,{"children":"<ion-header>\n  <ion-navbar color=\"danger\">\n    <ion-title>메모 상세</ion-title>\n    <ion-buttons end>\n      <button ion-button icon-only (click)=\"onDeleteMemo(memo)\">\n        <ion-icon name=\"trash\"></ion-icon>\n      </button>\n      <button ion-button icon-only (click)=\"onOpenEditMemo(memo)\">\n        <ion-icon name=\"hammer\"></ion-icon>\n      </button>\n    </ion-buttons>\n  </ion-navbar>\n</ion-header>\n<ion-content>\n  <ion-card>\n    <ion-card-header>\n      <h1>{{ memo.title }}</h1>\n    </ion-card-header>\n    <ion-card-content>\n      <p>{{ memo.contents }}</p>\n      <div class=\"etc\">\n        <p>\n          <span>저자</span>\n          {{ memo.author }}\n        </p>\n        <p>\n          <span>발행일</span>\n          {{ memo.publishedDate | date }}\n        </p>\n        <p>\n          <span>최근 수정일</span>\n          {{ memo.recentUpdatedDate | date }}\n        </p>\n      </div>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n"}]}],"\n",["$","pre","52",{"children":["$","code",null,{"children":"import { MemoManagerProvider } from \"./../../providers/memo-manager/memo-manager\"\nimport { Memo } from \"./../../models/memo/memo.interface\"\nimport { Component, OnInit } from \"@angular/core\"\nimport { IonicPage, NavController, NavParams } from \"ionic-angular\"\n\n@IonicPage()\n@Component({\n  selector: \"page-memo-create\",\n  templateUrl: \"memo-create.html\",\n})\nexport class MemoCreatePage {\n  memo: Memo\n  title: string\n  contents: string\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public memoManager: MemoManagerProvider\n  ) {}\n\n  ngOnInit() {\n    let memo = this.navParams.get(\"memo\")\n    if (memo) {\n      this.memo = memo\n      this.title = memo.title\n      this.contents = memo.contents\n    }\n  }\n\n  onChangeTitle(event: KeyboardEvent) {\n    this.title = event.target[\"value\"]\n  }\n\n  onChangeContents(event: KeyboardEvent) {\n    this.contents = event.target[\"value\"]\n  }\n\n  onSaveMemo() {\n    if (this.memo) {\n      this.memoManager.editMemo(this.memo, this.title, this.contents)\n    } else {\n      this.memoManager.createMemo(\n        this.title,\n        this.contents,\n        \"ddalpange@gmail.com\"\n      )\n    }\n    this.navCtrl.pop()\n  }\n}\n"}]}],"\n",["$","pre","54",{"children":["$","code",null,{"children":"<ion-header>\n  <ion-navbar color=\"secondary\">\n    <ion-title>메모 만들기</ion-title>\n  </ion-navbar>\n</ion-header>\n<ion-content padding>\n  <ion-list>\n    <ion-item>\n      <ion-input\n        placeholder=\"제목을 입력해주세요.\"\n        [value]=\"title\"\n        (change)=\"onChangeTitle($event)\"\n      ></ion-input>\n    </ion-item>\n    <ion-item>\n      <ion-textarea\n        rows=\"50\"\n        placeholder=\"내용을 입력해 주시겠어요 ?\"\n        [value]=\"contents\"\n        (change)=\"onChangeContents($event)\"\n      ></ion-textarea>\n    </ion-item>\n  </ion-list>\n  <ion-fab right bottom>\n    <button ion-fab icon-only color=\"secondary\" (click)=\"onSaveMemo()\">\n      <ion-icon name=\"checkmark\"></ion-icon>\n    </button>\n  </ion-fab>\n</ion-content>\n"}]}],"\n",["$","h3","56",{"children":"완성되었습니다!!"}],"\n",["$","hr","58",{"children":null}],"\n",["$","p","60",{"children":"참고 링크"}],"\n",["$","ul","62",{"children":["\n",["$","li","1",{"children":["$","a",null,{"href":"https://github.com/ddalpange/simple-memo","children":"해당 포스트에 작성된 모든 코드는 여기에 있습니다!"}]}],"\n",["$","li","3",{"children":["$","a",null,{"href":"https://memo-28314.firebaseapp.com","children":"해당 프로젝트는 여기서 볼 수 있습니다 !!"}]}],"\n"]}],"\n"]}]}],["$","$La",null,{"post":{"title":"간단한 메모장 만들기 3 - 목데이터 사용","date":"2017-10-03T22:48:57.000Z","thumbnail":"/blog/images/memo/memoBanner.png","banner":"/blog/images/memo/memoBanner.png","categories":["SimpleMemo"],"tags":["Javascript","Angular","Ionic","SimpleMemo"],"toc":true,"content":"\n이번 시간에서는 목 객체와 Angular2의 서비스(보통 아이오닉에선 provider 라고 명칭합니다.)를 이용해서 메모가 어떻게 만들어지고, 수정되고, 삭제되는지 알아볼겁니다. 틀리거나 안되는것이 있다면 바로바로 댓글로 달아주세요!\n\n<!-- more -->\n\n**mock objects?**\n\n> 목 객체는 실제 객체의 동작을 흉내내는 시뮬레이션 객체입니다. 보통 프론트단에서 api와의 의존성을 없애고 테스트를 쉽게 하기 위해 하드코딩된 데이터들을 mock data라고 칭합니다.\n\n**service?**\n\n> 서비스는 애플리케이션 전반에 걸쳐 코드를 구성하고 공유하는 데 사용되며, 일반적으로 데이터 액세스 방법을 생성하는 곳이기도 합니다. 즉 재사용성이 높은 코드들을 모아놓은 것이며, Angular2에서 기본으로 제공해주는 패턴중의 하나입니다. 서비스를 이해할려면 DI(Dependency Injection)을 이해해야하는데, 포스트가 너무 길어지니 다음에 하죠.\n\n### 메모 인터페이스 정의하기\n\n**src**폴더에서 **models**, **memo** 폴더를 차례대로 만들어 주신 후 그 안에 **memo.interface.ts**파일을 만들어주세요\n\n```typescript\nexport interface Memo {\n  key: number\n  author: string // 작성자\n  title: string // 제목\n  contents: string // 본문\n  publishedDate: Date // 작성일\n  recentUpdatedDate: Date // 최근 수정일\n}\n```\n\n### 목 메모리스트 정의하기\n\n**src**폴더에서 **mocks**, **memo** 폴더를 만들어 주신 후\n\n그 안에 **memo-list.mock.ts**파일을 만들어주세요\n\n```typescript\nimport { Memo } from \"./../../models/memo/memo.interface\"\nexport const MEMOLIST: Memo[] = [\n  {\n    key: 0,\n    title: \"제목 1\",\n    contents:\n      \"본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문\",\n    author: \"ddalpange@gmail.com\",\n    recentUpdatedDate: new Date(),\n    publishedDate: new Date(),\n  },\n  {\n    key: 1,\n    title: \"제목 2\",\n    contents:\n      \"본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문\",\n    author: \"ddalpange@gmail.com\",\n    recentUpdatedDate: new Date(),\n    publishedDate: new Date(),\n  },\n]\n```\n\n### 메모 관리 서비스 만들기 !\n\n```bash\n$ ionic g provider memo-manager\n```\n\n위 명령어를 실행하고 나면 **providers**라는 폴더가 **src** 폴더에 생길거에요!\nIonic Cli로 만든 provider는 앱 모듈에 자동으로 추가(registering)됩니다.\n\n```typescript\nimport { MEMOLIST } from \"./../../mocks/memo/memo-list.mock\"\nimport { Memo } from \"./../../models/memo/memo.interface\"\nimport { Injectable } from \"@angular/core\"\nimport { Http } from \"@angular/http\"\n\n/*\n  Generated class for the MemoManagerProvider provider.\n\n  See https://angular.io/docs/ts/latest/guide/dependency-injection.html\n  for more info on providers and Angular DI.\n*/\n@Injectable()\nexport class MemoManagerProvider {\n  memoList: Memo[]\n\n  constructor(public http: Http) {\n    this.initMemoList()\n  }\n\n  initMemoList() {\n    this.memoList = MEMOLIST\n  }\n\n  getMemoList(): Memo[] {\n    return this.memoList\n  }\n\n  getMemo(key: number): Memo {\n    let index = this.memoList.findIndex((memo: Memo, i: number) => {\n      return memo.key === key\n    })\n\n    return this.memoList[index] || null\n  }\n\n  createMemo(title: string, contents: string, author: string) {\n    let lastMemo = this.memoList[this.memoList.length - 1]\n    let lastMemoKey = lastMemo ? lastMemo.key : -1\n    let key = lastMemoKey + 1\n\n    let memo: Memo = {\n      key: key,\n      title: title,\n      contents: contents,\n      author: author,\n      publishedDate: new Date(),\n      recentUpdatedDate: new Date(),\n    }\n\n    this.memoList.push(memo)\n  }\n\n  deleteMemo(deleteMemo: Memo) {\n    let index = this.memoList.findIndex((memo: Memo, i: number) => {\n      return memo.key === deleteMemo.key\n    })\n\n    this.memoList.splice(index, 1)\n  }\n\n  editMemo(changeMemo: Memo, title: string, contents: string) {\n    let index = this.memoList.findIndex((memo: Memo, i: number) => {\n      return memo.key === changeMemo.key\n    })\n\n    this.memoList[index].title = title\n    this.memoList[index].contents = contents\n    this.memoList[index].recentUpdatedDate = new Date()\n  }\n}\n```\n\n잘 되는지 메모 리스트 페이지에서 메모 매니저를 주입(DI) 받아보겠습니다.\n\n메모 리스트페이지의 constructor 부분을 아래와 같이 바꿔주세요.\n\n```typescript\n...\nimport { MemoManagerProvider } from './../../providers/memo-manager/memo-manager';\n\n...\n\nexport class MemoListPage {\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public memoManager: MemoManagerProvider) {\n  }\n  .....\n}\n```\n\n**여기까지 !**\n\n잠시 숨 고르시고 에러 안나는지 살펴보세요.\n\n이제 페이지들의 뷰에 각 데이터들을 연동하고, 메모 매니저를 주입(DI)받아서 메모를 쓰기, 수정 삭제, 보기 할 수 있는 기능을 만들거에요.\n\n```typescript\nimport { Memo } from \"./../../mod els/memo/memo.interface\"\nimport { Component, OnInit } from \"@angular/core\"\nimport { IonicPage, NavController, NavParams } from \"ionic-angular\"\n\nimport { MemoCreatePage } from \"./../memo-create/memo-create\"\nimport { MemoDetailPage } from \"./../memo-detail/memo-detail\"\n\nimport { MemoManagerProvider } from \"./../../providers/memo-manager/memo-manager\"\n@IonicPage()\n@Component({\n  selector: \"page-memo-list\",\n  templateUrl: \"memo-list.html\",\n})\nexport class MemoListPage {\n  memoList: Memo[] = []\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public memoManager: MemoManagerProvider\n  ) {}\n\n  ngOnInit() {\n    this.memoList = this.memoManager.getMemoList()\n    console.log(this.memoList)\n  }\n\n  onClickViewMemoDetail(memo: Memo) {\n    this.navCtrl.push(MemoDetailPage, { memo: memo })\n  }\n\n  onClickCreateMemo() {\n    this.navCtrl.push(MemoCreatePage)\n  }\n}\n```\n\n```html **src/pages/memo-list/memo-list.html**\n<ion-header>\n  <ion-navbar color=\"primary\">\n    <ion-title>메모들</ion-title>\n  </ion-navbar>\n</ion-header>\n<ion-content>\n  <ng-template ngFor let-memo [ngForOf]=\"memoList\" let-i=\"index\">\n    <ion-card (click)=\"onClickViewMemoDetail(memo)\">\n      <ion-card-header> {{ memo.title }} </ion-card-header>\n      <ion-card-content> {{ memo.contents }} </ion-card-content>\n    </ion-card>\n  </ng-template>\n  <ion-fab right bottom>\n    <button ion-fab icon-only (click)=\"onClickCreateMemo()\">\n      <ion-icon name=\"add\" big></ion-icon>\n    </button>\n  </ion-fab>\n</ion-content>\n```\n\n```typescript\nimport { MemoManagerProvider } from \"./../../providers/memo-manager/memo-manager\"\nimport { Memo } from \"./../../models/memo/memo.interface\"\nimport { Component, OnInit } from \"@angular/core\"\nimport { IonicPage, NavController, NavParams } from \"ionic-angular\"\n\nimport { MemoCreatePage } from \"./../memo-create/memo-create\"\n\n@IonicPage()\n@Component({\n  selector: \"page-memo-detail\",\n  templateUrl: \"memo-detail.html\",\n})\nexport class MemoDetailPage {\n  memo: Memo\n  title: string\n  contents: string\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public memoManager: MemoManagerProvider\n  ) {}\n\n  ngOnInit() {\n    this.memo = this.navParams.get(\"memo\")\n  }\n\n  onOpenEditMemo(memo: Memo) {\n    this.navCtrl.push(MemoCreatePage, { memo: memo })\n  }\n\n  onDeleteMemo(memo: Memo) {\n    this.memoManager.deleteMemo(memo)\n    this.navCtrl.pop()\n  }\n}\n```\n\n```html **src/pages/memo-detail/memo-detail.html**\n<ion-header>\n  <ion-navbar color=\"danger\">\n    <ion-title>메모 상세</ion-title>\n    <ion-buttons end>\n      <button ion-button icon-only (click)=\"onDeleteMemo(memo)\">\n        <ion-icon name=\"trash\"></ion-icon>\n      </button>\n      <button ion-button icon-only (click)=\"onOpenEditMemo(memo)\">\n        <ion-icon name=\"hammer\"></ion-icon>\n      </button>\n    </ion-buttons>\n  </ion-navbar>\n</ion-header>\n<ion-content>\n  <ion-card>\n    <ion-card-header>\n      <h1>{{ memo.title }}</h1>\n    </ion-card-header>\n    <ion-card-content>\n      <p>{{ memo.contents }}</p>\n      <div class=\"etc\">\n        <p>\n          <span>저자</span>\n          {{ memo.author }}\n        </p>\n        <p>\n          <span>발행일</span>\n          {{ memo.publishedDate | date }}\n        </p>\n        <p>\n          <span>최근 수정일</span>\n          {{ memo.recentUpdatedDate | date }}\n        </p>\n      </div>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n```\n\n```typescript\nimport { MemoManagerProvider } from \"./../../providers/memo-manager/memo-manager\"\nimport { Memo } from \"./../../models/memo/memo.interface\"\nimport { Component, OnInit } from \"@angular/core\"\nimport { IonicPage, NavController, NavParams } from \"ionic-angular\"\n\n@IonicPage()\n@Component({\n  selector: \"page-memo-create\",\n  templateUrl: \"memo-create.html\",\n})\nexport class MemoCreatePage {\n  memo: Memo\n  title: string\n  contents: string\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public memoManager: MemoManagerProvider\n  ) {}\n\n  ngOnInit() {\n    let memo = this.navParams.get(\"memo\")\n    if (memo) {\n      this.memo = memo\n      this.title = memo.title\n      this.contents = memo.contents\n    }\n  }\n\n  onChangeTitle(event: KeyboardEvent) {\n    this.title = event.target[\"value\"]\n  }\n\n  onChangeContents(event: KeyboardEvent) {\n    this.contents = event.target[\"value\"]\n  }\n\n  onSaveMemo() {\n    if (this.memo) {\n      this.memoManager.editMemo(this.memo, this.title, this.contents)\n    } else {\n      this.memoManager.createMemo(\n        this.title,\n        this.contents,\n        \"ddalpange@gmail.com\"\n      )\n    }\n    this.navCtrl.pop()\n  }\n}\n```\n\n```html **src/pages/memo-create/memo-create.html**\n<ion-header>\n  <ion-navbar color=\"secondary\">\n    <ion-title>메모 만들기</ion-title>\n  </ion-navbar>\n</ion-header>\n<ion-content padding>\n  <ion-list>\n    <ion-item>\n      <ion-input\n        placeholder=\"제목을 입력해주세요.\"\n        [value]=\"title\"\n        (change)=\"onChangeTitle($event)\"\n      ></ion-input>\n    </ion-item>\n    <ion-item>\n      <ion-textarea\n        rows=\"50\"\n        placeholder=\"내용을 입력해 주시겠어요 ?\"\n        [value]=\"contents\"\n        (change)=\"onChangeContents($event)\"\n      ></ion-textarea>\n    </ion-item>\n  </ion-list>\n  <ion-fab right bottom>\n    <button ion-fab icon-only color=\"secondary\" (click)=\"onSaveMemo()\">\n      <ion-icon name=\"checkmark\"></ion-icon>\n    </button>\n  </ion-fab>\n</ion-content>\n```\n\n### 완성되었습니다!!\n\n---\n\n참고 링크\n\n- [해당 포스트에 작성된 모든 코드는 여기에 있습니다!](https://github.com/ddalpange/simple-memo)\n- [해당 프로젝트는 여기서 볼 수 있습니다 !!](https://memo-28314.firebaseapp.com)\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTM3MTEyODA0OCwxNDU2ODEwNTgyLDYxOT\ng3NjM2OF19\n-->\n","contentHtml":"<p>이번 시간에서는 목 객체와 Angular2의 서비스(보통 아이오닉에선 provider 라고 명칭합니다.)를 이용해서 메모가 어떻게 만들어지고, 수정되고, 삭제되는지 알아볼겁니다. 틀리거나 안되는것이 있다면 바로바로 댓글로 달아주세요!</p>\n<p><strong>mock objects?</strong></p>\n<blockquote>\n<p>목 객체는 실제 객체의 동작을 흉내내는 시뮬레이션 객체입니다. 보통 프론트단에서 api와의 의존성을 없애고 테스트를 쉽게 하기 위해 하드코딩된 데이터들을 mock data라고 칭합니다.</p>\n</blockquote>\n<p><strong>service?</strong></p>\n<blockquote>\n<p>서비스는 애플리케이션 전반에 걸쳐 코드를 구성하고 공유하는 데 사용되며, 일반적으로 데이터 액세스 방법을 생성하는 곳이기도 합니다. 즉 재사용성이 높은 코드들을 모아놓은 것이며, Angular2에서 기본으로 제공해주는 패턴중의 하나입니다. 서비스를 이해할려면 DI(Dependency Injection)을 이해해야하는데, 포스트가 너무 길어지니 다음에 하죠.</p>\n</blockquote>\n<h3>메모 인터페이스 정의하기</h3>\n<p><strong>src</strong>폴더에서 <strong>models</strong>, <strong>memo</strong> 폴더를 차례대로 만들어 주신 후 그 안에 <strong>memo.interface.ts</strong>파일을 만들어주세요</p>\n<pre><code>export interface Memo {\n  key: number\n  author: string // 작성자\n  title: string // 제목\n  contents: string // 본문\n  publishedDate: Date // 작성일\n  recentUpdatedDate: Date // 최근 수정일\n}\n</code></pre>\n<h3>목 메모리스트 정의하기</h3>\n<p><strong>src</strong>폴더에서 <strong>mocks</strong>, <strong>memo</strong> 폴더를 만들어 주신 후</p>\n<p>그 안에 <strong>memo-list.mock.ts</strong>파일을 만들어주세요</p>\n<pre><code>import { Memo } from \"./../../models/memo/memo.interface\"\nexport const MEMOLIST: Memo[] = [\n  {\n    key: 0,\n    title: \"제목 1\",\n    contents:\n      \"본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문\",\n    author: \"ddalpange@gmail.com\",\n    recentUpdatedDate: new Date(),\n    publishedDate: new Date(),\n  },\n  {\n    key: 1,\n    title: \"제목 2\",\n    contents:\n      \"본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문\",\n    author: \"ddalpange@gmail.com\",\n    recentUpdatedDate: new Date(),\n    publishedDate: new Date(),\n  },\n]\n</code></pre>\n<h3>메모 관리 서비스 만들기 !</h3>\n<pre><code>$ ionic g provider memo-manager\n</code></pre>\n<p>위 명령어를 실행하고 나면 <strong>providers</strong>라는 폴더가 <strong>src</strong> 폴더에 생길거에요!\nIonic Cli로 만든 provider는 앱 모듈에 자동으로 추가(registering)됩니다.</p>\n<pre><code>import { MEMOLIST } from \"./../../mocks/memo/memo-list.mock\"\nimport { Memo } from \"./../../models/memo/memo.interface\"\nimport { Injectable } from \"@angular/core\"\nimport { Http } from \"@angular/http\"\n\n/*\n  Generated class for the MemoManagerProvider provider.\n\n  See https://angular.io/docs/ts/latest/guide/dependency-injection.html\n  for more info on providers and Angular DI.\n*/\n@Injectable()\nexport class MemoManagerProvider {\n  memoList: Memo[]\n\n  constructor(public http: Http) {\n    this.initMemoList()\n  }\n\n  initMemoList() {\n    this.memoList = MEMOLIST\n  }\n\n  getMemoList(): Memo[] {\n    return this.memoList\n  }\n\n  getMemo(key: number): Memo {\n    let index = this.memoList.findIndex((memo: Memo, i: number) => {\n      return memo.key === key\n    })\n\n    return this.memoList[index] || null\n  }\n\n  createMemo(title: string, contents: string, author: string) {\n    let lastMemo = this.memoList[this.memoList.length - 1]\n    let lastMemoKey = lastMemo ? lastMemo.key : -1\n    let key = lastMemoKey + 1\n\n    let memo: Memo = {\n      key: key,\n      title: title,\n      contents: contents,\n      author: author,\n      publishedDate: new Date(),\n      recentUpdatedDate: new Date(),\n    }\n\n    this.memoList.push(memo)\n  }\n\n  deleteMemo(deleteMemo: Memo) {\n    let index = this.memoList.findIndex((memo: Memo, i: number) => {\n      return memo.key === deleteMemo.key\n    })\n\n    this.memoList.splice(index, 1)\n  }\n\n  editMemo(changeMemo: Memo, title: string, contents: string) {\n    let index = this.memoList.findIndex((memo: Memo, i: number) => {\n      return memo.key === changeMemo.key\n    })\n\n    this.memoList[index].title = title\n    this.memoList[index].contents = contents\n    this.memoList[index].recentUpdatedDate = new Date()\n  }\n}\n</code></pre>\n<p>잘 되는지 메모 리스트 페이지에서 메모 매니저를 주입(DI) 받아보겠습니다.</p>\n<p>메모 리스트페이지의 constructor 부분을 아래와 같이 바꿔주세요.</p>\n<pre><code>...\nimport { MemoManagerProvider } from './../../providers/memo-manager/memo-manager';\n\n...\n\nexport class MemoListPage {\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public memoManager: MemoManagerProvider) {\n  }\n  .....\n}\n</code></pre>\n<p><strong>여기까지 !</strong></p>\n<p>잠시 숨 고르시고 에러 안나는지 살펴보세요.</p>\n<p>이제 페이지들의 뷰에 각 데이터들을 연동하고, 메모 매니저를 주입(DI)받아서 메모를 쓰기, 수정 삭제, 보기 할 수 있는 기능을 만들거에요.</p>\n<pre><code>import { Memo } from \"./../../mod els/memo/memo.interface\"\nimport { Component, OnInit } from \"@angular/core\"\nimport { IonicPage, NavController, NavParams } from \"ionic-angular\"\n\nimport { MemoCreatePage } from \"./../memo-create/memo-create\"\nimport { MemoDetailPage } from \"./../memo-detail/memo-detail\"\n\nimport { MemoManagerProvider } from \"./../../providers/memo-manager/memo-manager\"\n@IonicPage()\n@Component({\n  selector: \"page-memo-list\",\n  templateUrl: \"memo-list.html\",\n})\nexport class MemoListPage {\n  memoList: Memo[] = []\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public memoManager: MemoManagerProvider\n  ) {}\n\n  ngOnInit() {\n    this.memoList = this.memoManager.getMemoList()\n    console.log(this.memoList)\n  }\n\n  onClickViewMemoDetail(memo: Memo) {\n    this.navCtrl.push(MemoDetailPage, { memo: memo })\n  }\n\n  onClickCreateMemo() {\n    this.navCtrl.push(MemoCreatePage)\n  }\n}\n</code></pre>\n<pre><code>&#x3C;ion-header>\n  &#x3C;ion-navbar color=\"primary\">\n    &#x3C;ion-title>메모들&#x3C;/ion-title>\n  &#x3C;/ion-navbar>\n&#x3C;/ion-header>\n&#x3C;ion-content>\n  &#x3C;ng-template ngFor let-memo [ngForOf]=\"memoList\" let-i=\"index\">\n    &#x3C;ion-card (click)=\"onClickViewMemoDetail(memo)\">\n      &#x3C;ion-card-header> {{ memo.title }} &#x3C;/ion-card-header>\n      &#x3C;ion-card-content> {{ memo.contents }} &#x3C;/ion-card-content>\n    &#x3C;/ion-card>\n  &#x3C;/ng-template>\n  &#x3C;ion-fab right bottom>\n    &#x3C;button ion-fab icon-only (click)=\"onClickCreateMemo()\">\n      &#x3C;ion-icon name=\"add\" big>&#x3C;/ion-icon>\n    &#x3C;/button>\n  &#x3C;/ion-fab>\n&#x3C;/ion-content>\n</code></pre>\n<pre><code>import { MemoManagerProvider } from \"./../../providers/memo-manager/memo-manager\"\nimport { Memo } from \"./../../models/memo/memo.interface\"\nimport { Component, OnInit } from \"@angular/core\"\nimport { IonicPage, NavController, NavParams } from \"ionic-angular\"\n\nimport { MemoCreatePage } from \"./../memo-create/memo-create\"\n\n@IonicPage()\n@Component({\n  selector: \"page-memo-detail\",\n  templateUrl: \"memo-detail.html\",\n})\nexport class MemoDetailPage {\n  memo: Memo\n  title: string\n  contents: string\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public memoManager: MemoManagerProvider\n  ) {}\n\n  ngOnInit() {\n    this.memo = this.navParams.get(\"memo\")\n  }\n\n  onOpenEditMemo(memo: Memo) {\n    this.navCtrl.push(MemoCreatePage, { memo: memo })\n  }\n\n  onDeleteMemo(memo: Memo) {\n    this.memoManager.deleteMemo(memo)\n    this.navCtrl.pop()\n  }\n}\n</code></pre>\n<pre><code>&#x3C;ion-header>\n  &#x3C;ion-navbar color=\"danger\">\n    &#x3C;ion-title>메모 상세&#x3C;/ion-title>\n    &#x3C;ion-buttons end>\n      &#x3C;button ion-button icon-only (click)=\"onDeleteMemo(memo)\">\n        &#x3C;ion-icon name=\"trash\">&#x3C;/ion-icon>\n      &#x3C;/button>\n      &#x3C;button ion-button icon-only (click)=\"onOpenEditMemo(memo)\">\n        &#x3C;ion-icon name=\"hammer\">&#x3C;/ion-icon>\n      &#x3C;/button>\n    &#x3C;/ion-buttons>\n  &#x3C;/ion-navbar>\n&#x3C;/ion-header>\n&#x3C;ion-content>\n  &#x3C;ion-card>\n    &#x3C;ion-card-header>\n      &#x3C;h1>{{ memo.title }}&#x3C;/h1>\n    &#x3C;/ion-card-header>\n    &#x3C;ion-card-content>\n      &#x3C;p>{{ memo.contents }}&#x3C;/p>\n      &#x3C;div class=\"etc\">\n        &#x3C;p>\n          &#x3C;span>저자&#x3C;/span>\n          {{ memo.author }}\n        &#x3C;/p>\n        &#x3C;p>\n          &#x3C;span>발행일&#x3C;/span>\n          {{ memo.publishedDate | date }}\n        &#x3C;/p>\n        &#x3C;p>\n          &#x3C;span>최근 수정일&#x3C;/span>\n          {{ memo.recentUpdatedDate | date }}\n        &#x3C;/p>\n      &#x3C;/div>\n    &#x3C;/ion-card-content>\n  &#x3C;/ion-card>\n&#x3C;/ion-content>\n</code></pre>\n<pre><code>import { MemoManagerProvider } from \"./../../providers/memo-manager/memo-manager\"\nimport { Memo } from \"./../../models/memo/memo.interface\"\nimport { Component, OnInit } from \"@angular/core\"\nimport { IonicPage, NavController, NavParams } from \"ionic-angular\"\n\n@IonicPage()\n@Component({\n  selector: \"page-memo-create\",\n  templateUrl: \"memo-create.html\",\n})\nexport class MemoCreatePage {\n  memo: Memo\n  title: string\n  contents: string\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public memoManager: MemoManagerProvider\n  ) {}\n\n  ngOnInit() {\n    let memo = this.navParams.get(\"memo\")\n    if (memo) {\n      this.memo = memo\n      this.title = memo.title\n      this.contents = memo.contents\n    }\n  }\n\n  onChangeTitle(event: KeyboardEvent) {\n    this.title = event.target[\"value\"]\n  }\n\n  onChangeContents(event: KeyboardEvent) {\n    this.contents = event.target[\"value\"]\n  }\n\n  onSaveMemo() {\n    if (this.memo) {\n      this.memoManager.editMemo(this.memo, this.title, this.contents)\n    } else {\n      this.memoManager.createMemo(\n        this.title,\n        this.contents,\n        \"ddalpange@gmail.com\"\n      )\n    }\n    this.navCtrl.pop()\n  }\n}\n</code></pre>\n<pre><code>&#x3C;ion-header>\n  &#x3C;ion-navbar color=\"secondary\">\n    &#x3C;ion-title>메모 만들기&#x3C;/ion-title>\n  &#x3C;/ion-navbar>\n&#x3C;/ion-header>\n&#x3C;ion-content padding>\n  &#x3C;ion-list>\n    &#x3C;ion-item>\n      &#x3C;ion-input\n        placeholder=\"제목을 입력해주세요.\"\n        [value]=\"title\"\n        (change)=\"onChangeTitle($event)\"\n      >&#x3C;/ion-input>\n    &#x3C;/ion-item>\n    &#x3C;ion-item>\n      &#x3C;ion-textarea\n        rows=\"50\"\n        placeholder=\"내용을 입력해 주시겠어요 ?\"\n        [value]=\"contents\"\n        (change)=\"onChangeContents($event)\"\n      >&#x3C;/ion-textarea>\n    &#x3C;/ion-item>\n  &#x3C;/ion-list>\n  &#x3C;ion-fab right bottom>\n    &#x3C;button ion-fab icon-only color=\"secondary\" (click)=\"onSaveMemo()\">\n      &#x3C;ion-icon name=\"checkmark\">&#x3C;/ion-icon>\n    &#x3C;/button>\n  &#x3C;/ion-fab>\n&#x3C;/ion-content>\n</code></pre>\n<h3>완성되었습니다!!</h3>\n<hr>\n<p>참고 링크</p>\n<ul>\n<li><a href=\"https://github.com/ddalpange/simple-memo\">해당 포스트에 작성된 모든 코드는 여기에 있습니다!</a></li>\n<li><a href=\"https://memo-28314.firebaseapp.com\">해당 프로젝트는 여기서 볼 수 있습니다 !!</a></li>\n</ul>\n","summary":"<p>이번 시간에서는 목 객체와 Angular2의 서비스(보통 아이오닉에선 provider 라고 명칭합니다.)를 이용해서 메모가 어떻게 만들어지고, 수정되고, 삭제되는지 알아볼겁니다. 틀리거나 안되는것이 있다면 바로바로 댓글로 달아주세요!</p>\n","slug":"2017-10-03-project-make-simple-memo-3","link":"/blog/2017-10-03-project-make-simple-memo-3"}}]]}]
8:[null,null,[]]
9:[null,null,[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3127ef311b686118.css","precedence":"next.js"}]]]
