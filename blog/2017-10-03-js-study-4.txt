0:[[["",{"children":["blog",{"children":[["slug","2017-10-03-js-study-4","d"],{"children":["__PAGE__?{\"slug\":\"2017-10-03-js-study-4\"}",{}]}]}]},"$undefined","$undefined",true],"$L1","$L2"]]
3:I{"id":"2070","name":"","chunks":["131:131-718a907043a28311","185:app/layout-e989778009efa586"],"async":false}
4:I{"id":"7131","name":"","chunks":["131:131-718a907043a28311","931:app/page-a8aaecf3dc39acc6"],"async":false}
5:I{"id":"830","name":"","chunks":["272:webpack-a84c954fa8715833","776:0b7c6ed9-60e4a7f8e855a262","474:474-c8c5eb3e5e298e46"],"async":false}
6:I{"id":"2079","name":"","chunks":["272:webpack-a84c954fa8715833","776:0b7c6ed9-60e4a7f8e855a262","474:474-c8c5eb3e5e298e46"],"async":false}
1:[["$","html",null,{"lang":"en","data-theme":"retro","children":[["$","head",null,{"children":[["$","link",null,{"rel":"preconnect","href":"https://cdn.jsdelivr.net"}],["$","link",null,{"rel":"stylesheet","type":"text/css","href":"https://cdn.jsdelivr.net/gh/orioncactus/pretendard/dist/web/variable/pretendardvariable.css"}]]}],["$","body",null,{"className":"flex flex-col items-center h-[100svh]","children":[["$","$L3",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-XR7V7MF96T","strategy":"afterInteractive"}],["$","$L3",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){window.dataLayer.push(arguments);}\n          gtag('js', new Date());\n\n          gtag('config', 'G-XR7V7MF96T');\n        "}],["$","div",null,{"className":"w-full max-w-3xl flex-grow","children":[["$","div",null,{"className":"navbar","children":[["$","div",null,{"className":"flex-1","children":["$","$L4",null,{"className":"p-2 hover:underline md:text-2xl font-bold flex gap-4 items-center","href":"/","children":"Yozzing Blog"}]}],["$","div",null,{"className":"flex-none","children":["$","div",null,{"className":"tabs","children":[["$","$L4",null,{"className":"tab","href":"/engineering","children":"Engineering"}],["$","$L4",null,{"className":"tab","href":"/essay","children":"Essay"}],["$","a",null,{"className":"tab","href":"https://github.com/ddalpange","children":["$","div",null,{"className":"avatar","children":["$","div",null,{"className":"w-8 rounded-full","children":["$","img",null,{"alt":"yozzing","src":"/blog/images/profile.jpeg"}]}]}]}]]}]}]]}],["$","div",null,{"className":"p-4 pb-10","children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["slug","2017-10-03-js-study-4","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$L7","$@8"],"segment":"__PAGE__?{\"slug\":\"2017-10-03-js-study-4\"}"}}],"segment":["slug","2017-10-03-js-study-4","d"]}}],"segment":"blog"}}]}]]}]]}]]}],"$@9"]
2:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"자바스크립트 연산자"}],["$","meta",null,{"name":"description","content":"<p>자바스크립트의 연산자에 대하여 알아보자.</p>\n"}],null,[[["$","link",null,{"rel":"author","href":"https://github.io/ddalpange"}],["$","meta",null,{"name":"author","content":"ddalpange"}]]],null,null,["$","meta",null,{"name":"keywords","content":"Javascript"}],null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
a:I{"id":"3969","name":"Disqus","chunks":["308:app/blog/[slug]/page-2754d756216a6ffc"],"async":false}
7:["$","article",null,{"className":"prose max-w-full flex flex-col items-center","children":[["$","span",null,{"className":"mb-2","children":"5년 이상 전"}],["$","h1",null,{"children":"자바스크립트 연산자"}],["$","div",null,{"children":["$","div",null,{"className":"prose self-center","children":[["$","p","0",{"children":"자바스크립트의 연산자에 대하여 알아보자."}],"\n",["$","h3","2",{"children":"산술연산자"}],"\n",["$","h4","4",{"children":"a. 연산자"}],"\n",["$","h5","6",{"children":"ㄱ. 덧셈"}],"\n",["$","ol","8",{"children":["\n",["$","li","1",{"children":"피연산자의 숫자 값을 더하거나 피연산자의 문자열을 이어 붙임"}],"\n",["$","li","3",{"children":["피연산자의 타입이 서로 다를 경우 ",["$","em","1",{"children":["$","strong",null,{"children":"toString()"}]}]," 메소드를 호출하여 더함"]}],"\n"]}],"\n",["$","pre","10",{"children":["$","code",null,{"children":"console.log('2' + 1);\nconsole.log('1' + 2);\nconsole.log('1' + {});\nconsole.log(2 + null);\nconsole.log(3 + undefined);\n"}]}],"\n",["$","h5","12",{"children":"ㄴ. 나눗셈"}],"\n",["$","ol","14",{"children":["\n",["$","li","1",{"children":"자바스크립트의 모든 숫자는 부동소숫점 숫자로 취급됌"}],"\n"]}],"\n",["$","pre","16",{"children":["$","code",null,{"children":"console.log(5/2);\n"}]}],"\n",["$","h4","18",{"children":"b. 단항 연산자"}],"\n",["$","h5","20",{"children":"ㄱ. 단항 덧셈(+)"}],"\n",["$","ol","22",{"children":["\n",["$","li","1",{"children":"피연산자를 숫자(or NaN)으로 바꾼 후 값을 반환한다. 만일 피연산자가 숫자일 경우 아무 일도 하지 않는다."}],"\n"]}],"\n",["$","h5","24",{"children":"ㄴ. 단항 뺄셈(-)"}],"\n",["$","ol","26",{"children":["\n",["$","li","1",{"children":"피연산자를 숫자로 변환하려 시도하고 부호를 바꾼다."}],"\n"]}],"\n",["$","h5","28",{"children":"ㄷ. 증가(++), 감소(--)"}],"\n",["$","ol","30",{"children":["\n",["$","li","1",{"children":"피연산자의 값 앞에 있을 경우 증가(감소)한 후의 값을 반환한다."}],"\n",["$","li","3",{"children":"피연산자의 값 뒤에 있을 경우 현재 값을 반환한 후 증가(감소)한다."}],"\n"]}],"\n",["$","h4","32",{"children":"ㄹ. 비트 연산자"}],"\n",["$","blockquote","34",{"children":["\n",["$","p","1",{"children":"2진수를 저수준에서 조작하는 데 사용한다. 사칙연산 과 같은 산술 연산을 수행하지는 않지만, 피연산자로 숫자 값을 사용하고 최종적으로 숫자값을 반환하기 때문에 자바스크립트에서는 산수 연산자로 분류되어있다. 많이 쓰지 않으니 종류만 알고 넘어가자."}],"\n"]}],"\n",["$","ol","36",{"children":["\n",["$","li","1",{"children":"AND(&) : 불리언 AND연산을 수행한다."}],"\n",["$","li","3",{"children":"OR(|) : 불리언 OR연산을 수행한다."}],"\n",["$","li","5",{"children":"XOR(^) : 불리언 XOR 연산을 수행한다."}],"\n",["$","li","7",{"children":"NOT(~) : 모든 비트를 반전시킨다."}],"\n",["$","li","9",{"children":"<< : 왼쪽으로 이동"}],"\n",["$","li","11",{"children":">> : 부호를 보존하면서 오른쪽으로 이동"}],"\n",["$","li","13",{"children":">>> : 0으로 채우면서 오른쪽으로 이동"}],"\n"]}],"\n",["$","h4","38",{"children":"c. 동치 연산자"}],"\n",["$","h5","40",{"children":"ㄱ. =="}],"\n",["$","ol","42",{"children":["\n",["$","li","1",{"children":"두 값 중 하나가 null이고 다른 하나가 undefined라면 일치한다."}],"\n",["$","li","3",{"children":"두 값의 타입이 다를 경우 형변환을 한 후 비교한다."}],"\n",["$","li","5",{"children":"하나의 객체가 있고 숫자,문자가 있다면 toString(), valueOf()를 호출한 후 비교한다"}],"\n"]}],"\n",["$","h5","44",{"children":"ㄴ. ==="}],"\n",["$","ol","46",{"children":["\n",["$","li","1",{"children":"두 값이 모두 null이거나 undefined면 일치한다."}],"\n",["$","li","3",{"children":"적어도 하나의 값이 NaN이면 일치하지않는다. NaN은 isNaN()을 써야한다."}],"\n",["$","li","5",{"children":"두 값이 문자열이며 정확히 같은위치에 16비트 값을 가지고 있다면 두 값은 일치한다. 육안상으로 같더라도 16비트 값의 순서가 다르게 인코딩되어 있다면 일치하지 않는다. (String.localCompare())"}],"\n",["$","li","7",{"children":"객체의 프로퍼티가 같더라도 주소값이 다르면 일치하지 않는다."}],"\n"]}],"\n",["$","pre","48",{"children":["$","code",null,{"children":"console.log(null === undefined);\n"}]}],"\n"]}]}],["$","$La",null,{"post":{"title":"자바스크립트 연산자","date":"2017-10-03T22:44:47.000Z","thumbnail":null,"categories":["Javascript"],"tags":["Javascript"],"toc":true,"content":"\n자바스크립트의 연산자에 대하여 알아보자.\n\n<!-- more -->\n\n### 산술연산자\n\n#### a. 연산자\n\n##### ㄱ. 덧셈\n  1. 피연산자의 숫자 값을 더하거나 피연산자의 문자열을 이어 붙임\n  2. 피연산자의 타입이 서로 다를 경우 ___toString()___ 메소드를 호출하여 더함\n\n<!-- more -->\n\n```javascript\nconsole.log('2' + 1);\nconsole.log('1' + 2);\nconsole.log('1' + {});\nconsole.log(2 + null);\nconsole.log(3 + undefined);\n```\n\n##### ㄴ. 나눗셈\n 1. 자바스크립트의 모든 숫자는 부동소숫점 숫자로 취급됌\n\n ```javascript\n console.log(5/2);\n ```\n\n<!-- more -->\n\n#### b. 단항 연산자\n\n##### ㄱ. 단항 덧셈(+)\n  1. 피연산자를 숫자(or NaN)으로 바꾼 후 값을 반환한다. 만일 피연산자가 숫자일 경우 아무 일도 하지 않는다.\n\n##### ㄴ. 단항 뺄셈(-)\n  1. 피연산자를 숫자로 변환하려 시도하고 부호를 바꾼다.\n\n##### ㄷ. 증가(++), 감소(--)\n  1. 피연산자의 값 앞에 있을 경우 증가(감소)한 후의 값을 반환한다.\n  2. 피연산자의 값 뒤에 있을 경우 현재 값을 반환한 후 증가(감소)한다.\n\n#### ㄹ. 비트 연산자\n\n> 2진수를 저수준에서 조작하는 데 사용한다. 사칙연산 과 같은 산술 연산을 수행하지는 않지만, 피연산자로 숫자 값을 사용하고 최종적으로 숫자값을 반환하기 때문에 자바스크립트에서는 산수 연산자로 분류되어있다. 많이 쓰지 않으니 종류만 알고 넘어가자.\n1. AND(&) : 불리언 AND연산을 수행한다.\n2. OR(|) : 불리언 OR연산을 수행한다.\n3. XOR(^) : 불리언 XOR 연산을 수행한다.\n4. NOT(~) : 모든 비트를 반전시킨다.\n5. << : 왼쪽으로 이동\n6. &gt;&gt; : 부호를 보존하면서 오른쪽으로 이동\n7. &gt;&gt;&gt; : 0으로 채우면서 오른쪽으로 이동\n\n\n#### c. 동치 연산자\n\n##### ㄱ. ==\n  1. 두 값 중 하나가 null이고 다른 하나가 undefined라면 일치한다.\n  2. 두 값의 타입이 다를 경우 형변환을 한 후 비교한다.\n  3. 하나의 객체가 있고 숫자,문자가 있다면 toString(), valueOf()를 호출한 후 비교한다\n\n##### ㄴ. ===\n  1. 두 값이 모두 null이거나 undefined면 일치한다.\n  2. 적어도 하나의 값이 NaN이면 일치하지않는다. NaN은 isNaN()을 써야한다.\n  3. 두 값이 문자열이며 정확히 같은위치에 16비트 값을 가지고 있다면 두 값은 일치한다. 육안상으로 같더라도 16비트 값의 순서가 다르게 인코딩되어 있다면 일치하지 않는다. (String.localCompare())\n  4. 객체의 프로퍼티가 같더라도 주소값이 다르면 일치하지 않는다.\n\n  ```javascript\n  console.log(null === undefined);\n  ```\n\n\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTY0OTI5NjEzMiwtMTcxMzczNTc0MiwtMT\ng3NDI5MDA2Nl19\n-->","contentHtml":"<p>자바스크립트의 연산자에 대하여 알아보자.</p>\n<h3>산술연산자</h3>\n<h4>a. 연산자</h4>\n<h5>ㄱ. 덧셈</h5>\n<ol>\n<li>피연산자의 숫자 값을 더하거나 피연산자의 문자열을 이어 붙임</li>\n<li>피연산자의 타입이 서로 다를 경우 <em><strong>toString()</strong></em> 메소드를 호출하여 더함</li>\n</ol>\n<pre><code>console.log('2' + 1);\nconsole.log('1' + 2);\nconsole.log('1' + {});\nconsole.log(2 + null);\nconsole.log(3 + undefined);\n</code></pre>\n<h5>ㄴ. 나눗셈</h5>\n<ol>\n<li>자바스크립트의 모든 숫자는 부동소숫점 숫자로 취급됌</li>\n</ol>\n<pre><code>console.log(5/2);\n</code></pre>\n<h4>b. 단항 연산자</h4>\n<h5>ㄱ. 단항 덧셈(+)</h5>\n<ol>\n<li>피연산자를 숫자(or NaN)으로 바꾼 후 값을 반환한다. 만일 피연산자가 숫자일 경우 아무 일도 하지 않는다.</li>\n</ol>\n<h5>ㄴ. 단항 뺄셈(-)</h5>\n<ol>\n<li>피연산자를 숫자로 변환하려 시도하고 부호를 바꾼다.</li>\n</ol>\n<h5>ㄷ. 증가(++), 감소(--)</h5>\n<ol>\n<li>피연산자의 값 앞에 있을 경우 증가(감소)한 후의 값을 반환한다.</li>\n<li>피연산자의 값 뒤에 있을 경우 현재 값을 반환한 후 증가(감소)한다.</li>\n</ol>\n<h4>ㄹ. 비트 연산자</h4>\n<blockquote>\n<p>2진수를 저수준에서 조작하는 데 사용한다. 사칙연산 과 같은 산술 연산을 수행하지는 않지만, 피연산자로 숫자 값을 사용하고 최종적으로 숫자값을 반환하기 때문에 자바스크립트에서는 산수 연산자로 분류되어있다. 많이 쓰지 않으니 종류만 알고 넘어가자.</p>\n</blockquote>\n<ol>\n<li>AND(&#x26;) : 불리언 AND연산을 수행한다.</li>\n<li>OR(|) : 불리언 OR연산을 수행한다.</li>\n<li>XOR(^) : 불리언 XOR 연산을 수행한다.</li>\n<li>NOT(~) : 모든 비트를 반전시킨다.</li>\n<li>&#x3C;&#x3C; : 왼쪽으로 이동</li>\n<li>>> : 부호를 보존하면서 오른쪽으로 이동</li>\n<li>>>> : 0으로 채우면서 오른쪽으로 이동</li>\n</ol>\n<h4>c. 동치 연산자</h4>\n<h5>ㄱ. ==</h5>\n<ol>\n<li>두 값 중 하나가 null이고 다른 하나가 undefined라면 일치한다.</li>\n<li>두 값의 타입이 다를 경우 형변환을 한 후 비교한다.</li>\n<li>하나의 객체가 있고 숫자,문자가 있다면 toString(), valueOf()를 호출한 후 비교한다</li>\n</ol>\n<h5>ㄴ. ===</h5>\n<ol>\n<li>두 값이 모두 null이거나 undefined면 일치한다.</li>\n<li>적어도 하나의 값이 NaN이면 일치하지않는다. NaN은 isNaN()을 써야한다.</li>\n<li>두 값이 문자열이며 정확히 같은위치에 16비트 값을 가지고 있다면 두 값은 일치한다. 육안상으로 같더라도 16비트 값의 순서가 다르게 인코딩되어 있다면 일치하지 않는다. (String.localCompare())</li>\n<li>객체의 프로퍼티가 같더라도 주소값이 다르면 일치하지 않는다.</li>\n</ol>\n<pre><code>console.log(null === undefined);\n</code></pre>\n","summary":"<p>자바스크립트의 연산자에 대하여 알아보자.</p>\n","slug":"2017-10-03-js-study-4","link":"/blog/2017-10-03-js-study-4"}}]]}]
8:[null,null,[]]
9:[null,null,[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3127ef311b686118.css","precedence":"next.js"}]]]
