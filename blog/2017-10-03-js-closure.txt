0:[[["",{"children":["blog",{"children":[["slug","2017-10-03-js-closure","d"],{"children":["__PAGE__?{\"slug\":\"2017-10-03-js-closure\"}",{}]}]}]},"$undefined","$undefined",true],"$L1","$L2"]]
3:I{"id":"2070","name":"","chunks":["131:131-b649a46ff1b8d8bb","185:app/layout-77153d09ec71e1b8"],"async":false}
4:I{"id":"7131","name":"","chunks":["131:131-b649a46ff1b8d8bb","931:app/page-358b8776c8124e34"],"async":false}
5:I{"id":"830","name":"","chunks":["272:webpack-1b75aaef18416899","776:0b7c6ed9-5895ea2b955a8219","474:474-2bfbc4a0bef14471"],"async":false}
6:I{"id":"2079","name":"","chunks":["272:webpack-1b75aaef18416899","776:0b7c6ed9-5895ea2b955a8219","474:474-2bfbc4a0bef14471"],"async":false}
1:[["$","html",null,{"lang":"en","data-theme":"retro","children":[["$","head",null,{"children":["$","link",null,{"rel":"stylesheet","type":"text/css","href":"https://cdn.jsdelivr.net/gh/orioncactus/pretendard/dist/web/variable/pretendardvariable.css"}]}],["$","body",null,{"className":"flex flex-col items-center h-[100svh]","children":[["$","$L3",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-XR7V7MF96T","strategy":"afterInteractive"}],["$","$L3",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){window.dataLayer.push(arguments);}\n          gtag('js', new Date());\n\n          gtag('config', 'G-XR7V7MF96T');\n        "}],["$","div",null,{"className":"w-full max-w-3xl flex-grow","children":[["$","div",null,{"className":"navbar bg-base-100","children":[["$","div",null,{"className":"flex-1","children":["$","$L4",null,{"className":"p-2 hover:underline md:text-2xl font-bold flex gap-4 items-center","href":"/","children":"Yozzing Blog"}]}],["$","div",null,{"className":"flex-none","children":["$","div",null,{"className":"tabs","children":[["$","$L4",null,{"className":"tab","href":"/engineering","children":"Engineering"}],["$","$L4",null,{"className":"tab","href":"/essay","children":"Essay"}],["$","a",null,{"className":"tab","href":"https://github.com/ddalpange","children":["$","div",null,{"className":"avatar","children":["$","div",null,{"className":"w-8 rounded-full","children":["$","img",null,{"src":"/blog/images/profile.jpeg"}]}]}]}]]}]}]]}],["$","div",null,{"className":"p-4 pb-10","children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["slug","2017-10-03-js-closure","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$L7","$@8"],"segment":"__PAGE__?{\"slug\":\"2017-10-03-js-closure\"}"}}],"segment":["slug","2017-10-03-js-closure","d"]}}],"segment":"blog"}}]}]]}]]}]]}],"$@9"]
2:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"자바스크립트 클로져"}],["$","meta",null,{"name":"description","content":"<p>자바스크립트의 주요 개념중 하나인 클로져에 대해 자세히 알아보자.</p>\n"}],null,[[["$","link",null,{"rel":"author","href":"https://github.io/ddalpange"}],["$","meta",null,{"name":"author","content":"ddalpange"}]]],null,null,["$","meta",null,{"name":"keywords","content":"Javascript,Closure"}],null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
7:["$","article",null,{"className":"prose","children":[["$","h1",null,{"children":"자바스크립트 클로져"}],["$","caption",null,{"children":"2017/10/03"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"<p>자바스크립트의 주요 개념중 하나인 클로져에 대해 자세히 알아보자.</p>\n<p><strong>클로져</strong></p>\n<p>클로져는 독립적인 (자유) 변수 (지역적으로 사용되지만, 둘러싼 범위 안에서 정의된 변수)를 참조하는 함수들이다.\n다른 말로 해석하면,\n이 함수들은 그들이 생성된 환경을 <strong>기억</strong>한다.</p>\n<p><strong>한가지 의문</strong></p>\n<p>클로져는 지역적으로 선언되었지만, 해당 함수가 선언된 블럭 안에 있는 독립된 변수들을 참조할 수 있는 함수라고 하였다.\n위 문장에서만 보면 자바스크립트의 모든 함수는 해당 블럭의 변수를 참조할 수 있음으로 자바스크립트의 모든 함수는 클로져라 할 수 있다.\n하지만 과연 자바스크립트의 모든 함수는 클로져일까 ??</p>\n<pre><code>function init() {\n  var name = \"Mozilla\";\n  \n  function displayName() { // displayName()은 내부 함수인, 클로져다\n    alert(name); // 부모 함수에서 선언된 변수를 사용한다\n  }\n\n  displayName();\n}\n\ninit();\n</code></pre>\n<p><code>displayName</code>은 자신이 선언된 환경을 기억하였다. 그렇다면 <code>displayName</code>은 클로져라고 부를 수 있는가 ?</p>\n<pre><code>function makeFunc() {\n  var name = \"Mozilla\";\n\n  function displayName() {\n    alert(name);\n  }\n\n  return displayName;\n}\n\nvar myFunc = makeFunc();\nmyFunc();\n</code></pre>\n<p><code>myFunc</code> 를 실행했을 때 <code>makeFunc</code>에 대한 참조가 없음에도 불구하고 <code>makeFunc</code>의 지역변수인 <code>name</code> 변수에 정상적으로 접근할 수 있다. 이상하지 않은가?</p>\n<p><code>displayName</code>은 자신이 선언된 스코프에서 벗어나 global 환경에서 초기화되었다.\n스코프 탐색은 실행스택과는 관련이 없는 <code>makeFunc</code>를 거쳐갔으며 <code>displayName</code>의 외부 스코프는 global이 아닌 <code>makeFunc</code>의 스코프이다.</p>\n<p><code>myFunc</code>가 글로벌 환경에서 초기화 되더라도 리턴된 <code>dispalyName</code>의 스코프체인은 <code>displayName</code> -> <code>makeFunc</code> -> <code>global</code> 순으로 형성된다.</p>\n<p>즉 초기화되는 위치와 관계없이 해당 함수가 <strong>선언</strong>된 곳에서 스코프를 형성한다는 뜻이다.</p>\n<p><code>myFunc</code>에 null을 할당하지 않으면 가비지콜렉터가 <code>makeFunc</code>의 메모리를 해제하지 않기 때문에 클로져를 사용한다면 별도로 꼭 null을 할당해줘야한다.</p>\n<pre><code>function count() {\n    var i;\n    for (i = 1; i &#x3C; 10; i ++) {\n        setTimeout(function timer() {\n            console.log(i);\n        }, i*100);\n    }\n}\ncount();\n</code></pre>\n<p>1 ~ 10까지 1씩 증가하여 출력하는 코드를 원했지만 결과는 기대와 달리 10이 9번 출력된다.\n0.1초동안 i는 10이 되었기 때문이며 클로져함수 timer에서 외부 스코프인 <code>count</code>의 변수인 <code>i</code>에 직접 접근하여 출력하였기 때문이다.\n해당 코드를 원하는 결과값으로 바꾸기 위해 어떻게 해야할까 ?</p>\n<p><strong>내부 스코프를 하나 더 추가하는 방식.</strong></p>\n<pre><code>function count() {\n    var i;\n    for (i = 1; i &#x3C; 10; i += 1) {\n        (function(countingNumber) {\n            setTimeout(function timer() {\n                console.log(countingNumber);\n            }, i * 100);\n        })(i);\n    }\n}\ncount();\n</code></pre>\n<p><strong>블록 스코프를 이용하는 방식</strong></p>\n<pre><code>function count() {\n    'use strict';\n    for (let i = 1; i &#x3C; 10; i += 1) {\n        setTimeout(function timer() {\n            console.log(i);\n        }, i * 100);\n    }\n}\ncount();\n</code></pre>\n<p><strong>느낀 점</strong>\n클로져는 재미있는 개념이다. 클로져란 개념을 이해하기 위해서 11개 정도의 글을 정독하였는데, 사람마다 이해하는 클로져의 개념이 다 똑같은것 같지는 않다.\n최대한 다양한 관점에서 클로져를 바라보고 글을 쓸려고 노력하였는데 결국 나랑 비슷한 사람의 글을 거의 베끼다시피 한것 같다.\n언제나 느끼지만 글쓰기는 참 어렵다.</p>\n<p><strong>참고</strong></p>\n<ol>\n<li>http://blog.javarouka.me/2012/01/javascripts-closure.html</li>\n<li>http://meetup.toast.com/posts/86</li>\n<li>http://unikys.tistory.com/309</li>\n</ol>\n"}}]]}]
8:[null,null,[]]
9:[null,null,[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d71785f3ad35c274.css","precedence":"next.js"}]]]
